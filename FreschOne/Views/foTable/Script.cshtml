
@{
    ViewData["Title"] = "🧩 Generate Table Script";
    var userid = ViewBag.userid;
    var tableId = ViewBag.tableId;
    var systemColumns = ViewBag.SystemColumns as List<(string Name, string Type)> ?? new();
    var foreignKeyTables = ViewBag.ForeignKeyTables as List<string> ?? new();
    var baseTableName = ViewBag.BaseTableName as string ?? "";
    var matchedPrefix = ViewBag.MatchedPrefix as string ?? "";
    var ColumnNames = (ViewBag.ColumnNames as string ?? "").Replace("\"", "").Trim();
    var TableGroup = ViewBag.TableGroup;



}

<partial name="_Sidebar" />

<h2 class="mb-3">🧩 Generate SQL Script</h2>
<input type="hidden" name="userid" value="@userid" />

<div class="col-md-6">
    <label class="form-label">Table Group:</label>
    @Html.DropDownList("TableGroup",
            (List<SelectListItem>)ViewBag.TableGroupsSelectList,
            ViewBag.SelectedTableGroup as string, // 👈 this sets the selected item
            new { @class = "form-select" })
</div>


<div class="mb-3">
    <label class="form-label">Schema</label>
    <input type="text" id="schemaName" class="form-control" placeholder="e.g., dbo" value="dbo" />
</div>

<div class="mb-3">
    @foreach (var prefix in ViewBag.Prefixes as List<(string Prefix, string Description)>)
    {
        var isChecked = prefix.Prefix == matchedPrefix ? "checked" : "";
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="tablePrefix" value="@prefix.Prefix" id="@prefix.Prefix" @isChecked />
            <label class="form-check-label" for="@prefix.Prefix">@prefix.Description (@prefix.Prefix)</label>
        </div>
    }
</div>

<div class="mb-3">
    <label class="form-label">Table Name</label>
    <input type="text" id="tableName" class="form-control" value="@baseTableName" placeholder="Enter name without prefix e.g. Student" required />
</div>

<div class="mb-3">
    <label class="form-label">Comma-delimited Column Names</label>
    <input type="text" id="columnList" class="form-control"
           placeholder="e.g., Name,DateOfBirth,Grade"
           value="@ColumnNames" required />

</div>

<div class="mb-3">
    <button class="btn btn-blue" onclick="generateFields()">➕ Generate Fields</button>
</div>
<form id="fieldsForm">
    <table class="table table-bordered table-sm" id="fieldBuilder">
        <thead class="table-light align-middle">
            <tr>
                <th>Column Name</th>
                <th>Data Type</th>
                <th>Length / Precision</th>
                <th>Nullable</th>
                <th>Attachment</th>
                <th>Geo</th>
                <th>FK Reference</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</form>


<h5 class="mt-4">📜 Generated Script</h5>
<pre class="bg-light p-3 border rounded" id="generatedScript"></pre>

<button class="btn btn-purple mb-3" onclick="copyScript()">📋 Copy to Clipboard</button>

<button class="btn btn-green mb-3" onclick="saveTable(); showLoading();">💾 Save Table</button>

<a href="@Url.Action("Index", new { userid = userid })" class="btn btn-red mb-3">Cancel</a>

<div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(255,255,255,0.7); z-index:9999; justify-content:center; align-items:center; opacity:0; transition: opacity 0.3s;">
    <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@using Newtonsoft.Json
<script type="text/javascript">
    const fkTables = @Html.Raw(JsonConvert.SerializeObject(ViewBag.ForeignKeyTables ?? new List<string>()));
    const savedColumns = @Html.Raw(JsonConvert.SerializeObject(ViewBag.SavedColumns ?? new List<FreschOne.Models.foTableColumns>()));

    function toPascalCase(text) {
        return text
            .toLowerCase()
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join('');
    }

    document.querySelectorAll("input[name='tablePrefix']").forEach(radio => {
        radio.addEventListener("change", () => {
            document.getElementById("tableName").disabled = false;
            updateScript();
        });
    });

    document.getElementById("tableName").disabled = true;
    document.getElementById("tableName").addEventListener("input", updateScript);
    document.getElementById("fieldBuilder").addEventListener("input", updateScript);

    function generateFields() {
        const fieldBuilder = document.getElementById("fieldBuilder");
        const columns = document.getElementById("columnList").value
            .split(',')
            .map(x => x.trim())
            .filter(x => x);

        // Create table structure
        fieldBuilder.innerHTML = `
            <table class="table table-bordered table-sm">
        <thead class="table-light align-middle">
                    <tr>
                        <th style="width: 18%">Field Name</th>
                        <th style="width: 18%">Type</th>
                        <th style="width: 14%">Length</th>
                        <th style="width: 14%">Nullable</th>
                        <th style="width: 6%">Attachment</th>
                        <th style="width: 6%">Geo</th>
                        <th style="width: 24%">FK Reference</th>
                    </tr>
                </thead>
                <tbody id="fieldRows"></tbody>
            </table>
        `;

        const tbody = document.getElementById("fieldRows");

        columns.forEach(originalName => {
            let pascalName = toPascalCase(originalName);
            if (pascalName.toLowerCase().endsWith("id")) {
                pascalName = pascalName.slice(0, -2) + "ID";
            }

            const isForeignKey = pascalName.endsWith("ID");

            let fkDropdownHtml = `<td></td>`;
            if (isForeignKey) {
                let fkOptionsHtml = `<option value="">(FK Reference)</option>`;
                fkTables.forEach(tbl => {
                    fkOptionsHtml += `<option value="${tbl}">${tbl}</option>`;
                });
                fkDropdownHtml = `
                    <td>
                        <select class="form-select fk-ref">
                            ${fkOptionsHtml}
                        </select>
                    </td>`;
            }

            let defaultType = "varchar";
            if (pascalName.toLowerCase().endsWith("id")) defaultType = "bigint";
            if (pascalName.toLowerCase().includes("date")) defaultType = "datetime";

            let defaultLength = "";
            if (defaultType === "varchar") defaultLength = "max";
            if (defaultType === "decimal") defaultLength = "18,2";


            const row = document.createElement("tr");
            row.innerHTML = `
                <td><label class="form-label fw-bold" data-original="${originalName}">${pascalName}</label></td>
                <td>
                    <select class="form-select datatype">
                        <option ${defaultType === "varchar" ? "selected" : ""}>varchar</option>
                        <option ${defaultType === "int" ? "selected" : ""}>int</option>
                        <option ${defaultType === "bigint" ? "selected" : ""}>bigint</option>
                        <option ${defaultType === "datetime" ? "selected" : ""}>datetime</option>
                        <option ${defaultType === "decimal" ? "selected" : ""}>decimal</option>
                        <option ${defaultType === "bit" ? "selected" : ""}>bit</option>
                    </select>
                </td>
                    <td><input type="text" class="form-control length" placeholder="Length/Precision (optional)" value="${defaultLength}" /></td>
                 <td>
                    <select class="form-select nullable">
                        <option value="NULL">NULL</option>
                        <option value="NOT NULL">NOT NULL</option>
                    </select>
                </td>
                <td class="text-center">
                    <input type="checkbox" class="form-check-input attach-check" title="Attachment Field" />
                </td>
                <td class="text-center">
                    <input type="checkbox" class="form-check-input geo-check" title="Geo Field" />
                </td>
                ${fkDropdownHtml}
            `;
            tbody.appendChild(row);

                // After appending each row
    tbody.appendChild(row);

    // Enforce checkbox enable/disable logic based on data type
    const datatypeSelect = row.querySelector(".datatype");
    const attachCheckbox = row.querySelector(".attach-check");
    const geoCheckbox = row.querySelector(".geo-check");

    function toggleSpecialFields() {
        const isVarchar = datatypeSelect.value.toLowerCase() === "varchar";
        attachCheckbox.disabled = !isVarchar;
        geoCheckbox.disabled = !isVarchar;

        // Optional: uncheck if disabled
        if (!isVarchar) {
            attachCheckbox.checked = false;
            geoCheckbox.checked = false;
        }
    }

        datatypeSelect.addEventListener("change", () => {
        toggleSpecialFields();

        // Auto-fill length based on selected type
        const type = datatypeSelect.value.toLowerCase();
        const lengthInput = row.querySelector(".length");

        if (type === "varchar") {
            lengthInput.value = "max";
        } else if (type === "decimal") {
            lengthInput.value = "18,2";
        } else {
            lengthInput.value = "";
        }

        updateScript();
    });


    attachCheckbox.addEventListener("change", () => {
        if (attachCheckbox.checked) {
            geoCheckbox.checked = false;
        }
        updateScript();
    });

    geoCheckbox.addEventListener("change", () => {
        if (geoCheckbox.checked) {
            attachCheckbox.checked = false;
        }
        updateScript();
    });


    // Initial run
    toggleSpecialFields();

        });

        updateScript();
    }

    // ✅ Update field names when checkboxes change
    document.addEventListener("change", (e) => {
        if (e.target.classList.contains("attach-check") || e.target.classList.contains("geo-check")) {
            document.querySelectorAll("#fieldRows tr").forEach(row => {
                const label = row.querySelector("label");
                const original = label.getAttribute("data-original");
                let newName = original;

                if (row.querySelector(".attach-check").checked) newName = `attachment_${newName}`;
                if (row.querySelector(".geo-check").checked) newName = `geo_${newName}`;

                label.innerText = toPascalCase(newName);
            });
            updateScript();
        }
    });

    // ✅ Prefill from DB
    window.addEventListener("DOMContentLoaded", () => {
        const prefixSelected = document.querySelector("input[name='tablePrefix']:checked");
        if (prefixSelected) {
            document.getElementById("tableName").disabled = false;
        }

        const columnListInput = document.getElementById("columnList");
        if (savedColumns.length > 0) {
            if (!columnListInput.value.trim()) {
                columnListInput.value = savedColumns.map(c => c.ColumnName).join(",");
            }

            generateFields();
            setTimeout(() => {
                document.querySelectorAll("#fieldRows tr").forEach((row, index) => {
                    const label = row.querySelector("label");
                    const dataOriginal = label.getAttribute("data-original")?.trim();
                    const matched = savedColumns.find(sc =>
                        sc.ColumnName?.trim().toLowerCase() === dataOriginal?.toLowerCase()
                    );
                    if (!matched) return;

                    row.querySelector(".datatype").value = matched.ColumnDataType;
                    row.querySelector(".nullable").value = matched.IsNullable ? "NULL" : "NOT NULL";
                    row.querySelector(".attach-check").checked = matched.Attachment === true;
                    row.querySelector(".geo-check").checked = matched.Geo === true;

                    const lenInput = row.querySelector(".length");
                    if (lenInput) lenInput.value = matched.ColumnLength_Precision || "";

                    const fkDropdown = row.querySelector(".fk-ref");
                    if (fkDropdown && matched.ForeignKeyTable) {
                        let fkOptionsHtml = `<option value="">(FK Reference)</option>`;
                        fkTables.forEach(tbl => {
                            const selected = tbl.trim().toLowerCase() === matched.ForeignKeyTable.trim().toLowerCase() ? 'selected' : '';
                            fkOptionsHtml += `<option value="${tbl}" ${selected}>${tbl}</option>`;
                        });
                        fkDropdown.innerHTML = fkOptionsHtml;
                    }
                });
                updateScript();
            }, 50);
        }
    });

    function updateScript() {
        setTimeout(() => {
            const baseName = document.getElementById("tableName").value || "YourTable";
            const prefixRadio = document.querySelector("input[name='tablePrefix']:checked");
            const prefix = prefixRadio ? prefixRadio.value : "";
            const fullTableName = prefix + baseName;

            let script = `CREATE TABLE [dbo].[${fullTableName}] (\n`;
            script += "    [ID] [bigint] IDENTITY(1,1) NOT NULL, PRIMARY KEY(ID), \n";

            if (prefix === "tbl_md_") {
                script += "    [Description] [varchar](MAX) NULL,\n";
            }

            document.querySelectorAll("#fieldRows tr").forEach(row => {
                const name = row.querySelector("label").innerText;
                const type = row.querySelector(".datatype").value;
                const len = row.querySelector(".length").value;
                const nullability = row.querySelector(".nullable").value;
                const fkRef = row.querySelector(".fk-ref")?.value;

                const lengthPart = (type === "varchar" || type === "decimal") && len ? `(${len})` : "";
                const fieldLine = `    [${name}] [${type}]${lengthPart} ${nullability}`;

                if (fkRef) {
                    script += `${fieldLine},\n    FOREIGN KEY([${name}]) REFERENCES [dbo].[${fkRef}] ([ID]),\n`;
                } else {
                    script += `${fieldLine},\n`;
                }
            });

    @foreach (var sysCol in systemColumns)
    {
        <text>script += "    [@sysCol.Name] [@sysCol.Type] NULL,\n";</text>
    }

            script = script.trim().replace(/,$/, "") + "\n)";
            document.getElementById("generatedScript").innerText = script;
        }, 50);
    }

    function saveTable() {
        const columns = [];
        const schemaName = document.getElementById("schemaName").value.trim();
        const baseName = document.getElementById("tableName").value.trim();
        const prefixRadio = document.querySelector("input[name='tablePrefix']:checked");
        const prefix = prefixRadio ? prefixRadio.value : "";
        const fullTableName = prefix + baseName;
        const userId = @userid;

        const columnNames = [];

        document.querySelectorAll("#fieldRows tr").forEach(row => {
        const label = row.querySelector("label");
        if (!label) return; // 🚫 skip header or malformed rows

        const original = label.getAttribute("data-original")?.trim();
        let name = original;

        const isAttachment = row.querySelector(".attach-check").checked;
        const isGeo = row.querySelector(".geo-check").checked;

        if (isAttachment) name = `attachment_${name}`;
        if (isGeo) name = `geo_${name}`;

        columnNames.push(name);

            columns.push({
                ColumnName: name,
                ColumnDataType: row.querySelector(".datatype").value.trim(),
                ColumnLength_Precision: row.querySelector(".length").value.trim() || null,
                IsNullable: row.querySelector(".nullable").value === "NULL",
                ForeignKeyTable: row.querySelector(".fk-ref")?.value.trim() || null,
                Attachment: isAttachment,
                Geo: isGeo
            });
        });


        const generatedScript = document.getElementById("generatedScript").innerText;
        const tableGroup = document.querySelector("select[name='TableGroup']").value;


        const foTable = {
            SchemaName: schemaName,
            TableName: fullTableName,
            ColumnNames: columnNames.join(','),
            Script: generatedScript,
            TableGroup: tableGroup // 👈 now included in the object sent to the API

        };

        fetch(`/foTable/SaveGeneratedTable?userid=${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            body: JSON.stringify(foTable)
        })
            .then(async response => {
                const rawText = await response.text();
                if (!response.ok) throw new Error(`SaveGeneratedTable failed: ${rawText}`);
                return JSON.parse(rawText);
            })
            .then(data => {
                const tableId = data.tableId;
                return fetch('/foTable/SaveTableColumns', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        TableID: tableId,
                        SchemaName: schemaName,
                        TableName: fullTableName,
                        Columns: columns,
                        UserID: userId
                    })
                });
            })
            .then(response => {
                if (!response.ok) throw new Error("SaveTableColumns failed");
                return response.text();
            })
            .then(() => {
                window.location.href = `/foTable/Index?userid=${userId}`;
            })
            .catch(error => {
                console.error("❌ Save failed:", error);
                alert("❌ Save failed: " + error.message);
            });
    }
</script>


