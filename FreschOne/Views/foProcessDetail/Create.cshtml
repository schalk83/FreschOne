@model FreschOne.Models.foProcessDetail

@{
    ViewData["Title"] = "Create Step Detail";
    var userid = ViewBag.userid;
    var processId = ViewBag.ProcessId;
    var stepId = ViewBag.StepId;
    bool isFirstDetail = ViewBag.IsFirstDetail == true;

    var tablePrefixes = ViewBag.TablePrefixes as List<(string Prefix, string Description)>;
    var tableOptions = ViewBag.ValidTables as List<SelectListItem>;
    var md_tableOptions = ViewBag.ValidmdTables as List<SelectListItem>;

}

<partial name="_Sidebar" />

<h2>Create Step Detail for @ViewBag.ProcessName : @ViewBag.StepDescription</h2>

@if (ViewBag.StepDetailList is List<FreschOne.Models.foProcessDetail> stepDetails && stepDetails.Any())
{
    <div class="accordion mb-4" id="detailsAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingDetails">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDetails" aria-expanded="false" aria-controls="collapseDetails">
                    View Existing Step Details
                </button>
            </h2>
            <div id="collapseDetails" class="accordion-collapse collapse" aria-labelledby="headingDetails" data-bs-parent="#detailsAccordion">
                <div class="accordion-body">
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>Table</th>
                                <th>Form Type</th>
                                <th>Column Query</th>
                                <th>Parent</th>
                                <th>FK Column</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in stepDetails)
                            {
                                <tr>
                                    <td>@row.TableName</td>
                                    <td>@row.FormType</td>
                                    <td>@row.ColumnQuery</td>
                                    <td>@(row.Parent ? "Yes" : "No")</td>
                                    <td>@row.FKColumn</td>
                                    <td>@row.TableDescription</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

<form asp-action="Create" asp-route-userid="@userid" asp-route-processId="@processId" asp-route-stepId="@stepId" method="post">
    <input type="hidden" asp-for="StepID" />

    <div class="mb-3">
        <label class="form-label d-block">Filter by Prefix</label>

        <div class="form-check form-check-inline">
            <input class="form-check-input prefix-filter" type="radio" name="prefixFilter" id="prefix_all" value="ALL" checked />
            <label class="form-check-label" for="prefix_all">All</label>
        </div>

        @foreach (var prefix in tablePrefixes)
        {
            var id = $"prefix_{prefix.Prefix}";
            <div class="form-check form-check-inline">
                <input class="form-check-input prefix-filter" type="radio" name="prefixFilter" id="@id" value="@prefix.Prefix" />
                <label class="form-check-label" for="@id">@prefix.Description</label>
            </div>
        }
    </div>



    <div class="mb-3">
        <label asp-for="TableName" class="form-label">Table Name</label>
        <select asp-for="TableName" class="form-select" id="TableNameDropdown">
            <option value=""></option>
            @foreach (var item in tableOptions)
            {
                var prefix = item.Group?.Name ?? "";
                <option value="@item.Value" data-prefix="@prefix">@item.Text</option>
            }
        </select>
        <span asp-validation-for="TableName" class="text-danger"></span>
    </div>


    <div class="mb-3">
        <label asp-for="ColumnQuery" class="form-label">Column Query</label>
        <input asp-for="ColumnQuery" class="form-control" />
        <span asp-validation-for="ColumnQuery" class="text-danger"></span>
    </div>

    <div id="testQuerySection" style="display: none;">
        <button type="button" class="btn btn-outline-info mb-2" onclick="testQuery()">Test Query</button>
        <div id="queryResult" class="mt-2"></div>
    </div>

    <div class="mb-3">
        <label asp-for="FormType" class="form-label">Form Type</label>
        <select asp-for="FormType" asp-items="ViewBag.FormTypes" class="form-select"></select>
        <span asp-validation-for="FormType" class="text-danger"></span>
    </div>
 
    <div class="mb-3" id="listTableContainer" style="display:@(Model.FormType == "T" ? "block" : "none")">
        <label asp-for="ListTable" class="form-label">List Table</label>
        <select asp-for="ListTable" class="form-select" id="mdTableNameDropdown">
            <option value=""></option>
            @foreach (var item in md_tableOptions)
            {
                var prefix = item.Group?.Name ?? "";
                <option value="@item.Value" data-prefix="@prefix">@item.Text</option>
            }
        </select>
        <span asp-validation-for="ListTable" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ColumnCount" class="form-label">Column Count</label>
        <input asp-for="ColumnCount" type="number" class="form-control" />
        <span asp-validation-for="ColumnCount" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Parent" class="form-label">Is Parent Table?</label>
        <select asp-for="Parent" class="form-select" id="Parent">
            <option value="false">No</option>
            <option value="true">Yes</option>
        </select>
        @if (isFirstDetail)
        {
            <div class="form-text text-info">First record must be parent.</div>
        }
        <span asp-validation-for="Parent" class="text-danger"></span>
    </div>


    <div class="mb-3" id="fkColumnGroup">
        <label asp-for="FKColumn" class="form-label">Foreign Key Column</label>
        <select asp-for="FKColumn" class="form-select" id="FKColumnSelect">
            <option value=""></option>
        </select>
        <span asp-validation-for="FKColumn" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="TableDescription" class="form-label">Description</label>
        <input asp-for="TableDescription" class="form-control" />
        <span asp-validation-for="TableDescription" class="text-danger"></span>
    </div>

    <div id="columnCalcsContainer" class="mb-3">
        <label for="ColumnCalcs" class="form-label fw-bold">Column Calcs</label>
        <input type="text" class="form-control" id="ColumnCalcs" name="ColumnCalcs" placeholder="e.g. Count(Field1), Sum(Field2)" />
        <div id="columnCalcsHelp" class="form-text">
            Use format: <code>Count(FieldName)</code>, <code>Sum(FieldName)</code>, separated by commas.
        </div>
        <div id="columnCalcsError" class="text-danger mt-1" style="display:none;">
            Invalid format. Please use: Count(FieldName), Sum(FieldName)
        </div>
    </div>



    <div class="mb-3 form-check">
        @Html.CheckBoxFor(m => m.Active, new { @class = "form-check-input" })
        <label asp-for="Active" class="form-check-label">Active</label>
        <span asp-validation-for="Active" class="text-danger"></span>
    </div>

    <br />
    <button type="submit" class="btn btn-success">Save</button>
    <button type="submit" class="btn btn-outline-primary" name="action" value="addanother">Save & Add Another</button>
    <a href="@Url.Action("Index", new { processId = processId, stepId = stepId, userid = userid })" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const tableDropdown = document.getElementById("TableNameDropdown");
            const formFieldsToHide = [
                "ColumnQuery",
                "testQuerySection",
                "FormType",
                "listTableContainer",
                "ColumnCount",
                "Parent",
                "fkColumnGroup",
                "TableDescription",
                "columnCalcsContainer"
            ];

            const columnInput = document.querySelector('[name="ColumnQuery"]');
            const fkSelect = document.getElementById("FKColumnSelect");
            const columnCalcsInput = document.getElementById("ColumnCalcs");
            const currentValue = "@Model.FKColumn";

            // Toggle field visibility
            function toggleFields() {
                const show = tableDropdown.value.trim() !== "";
                formFieldsToHide.forEach(id => {
                    const el = document.getElementById(id);
                    if (el) {
                        const wrapper = el.closest(".mb-3") || el;
                        wrapper.style.display = show ? "" : "none";
                    }
                });
            }

            // Handle FormType change
            function handleFormTypeChange() {
                const formType = document.getElementById("FormType").value;
                const columnCalcsContainer = document.getElementById("columnCalcsContainer");
                const listTableContainer = document.getElementById("listTableContainer");
                const columnCountInput = document.getElementById("ColumnCount");

                if (formType === "T") {
                    columnCountInput.value = 0;
                    columnCountInput.setAttribute("readonly", "readonly");
                    columnCalcsContainer.style.display = "block";
                    listTableContainer.style.display = "block";
                } else {
                    columnCountInput.removeAttribute("readonly");
                    columnCalcsContainer.style.display = "none";
                    listTableContainer.style.display = "none";
                    document.getElementById("mdTableNameDropdown").value = "";
                }
            }

            // Toggle FK column dropdown
            function toggleFKDropdown() {
                const isParent = document.querySelector('[name="Parent"]').value === "true";
                const tableSelected = tableDropdown.value.trim() !== "";
                const fkGroup = document.getElementById('fkColumnGroup');

                fkSelect.value = "";
                if (isParent) {
                    fkSelect.removeAttribute("required");
                } else {
                    fkSelect.setAttribute("required", "required");
                }

                // 👇 show only when applicable
                fkGroup.style.display = (!isParent && tableSelected) ? "block" : "none";
            }


            // ColumnCalcs validation
            function validateColumnCalcs() {
                const pattern = /^\s*(Count|Sum)\(\s*\w+\s*\)\s*(,\s*(Count|Sum)\(\s*\w+\s*\)\s*)*$/i;
                const error = document.getElementById("columnCalcsError");
                if (!columnCalcsInput.value.trim() || pattern.test(columnCalcsInput.value.trim())) {
                    error.style.display = "none";
                } else {
                    error.style.display = "block";
                }
            }

            // Check Test Query visibility
            function checkTestQueryVisibility() {
                const tableName = tableDropdown.value.trim();
                const columnQuery = columnInput.value.trim();
                const section = document.getElementById("testQuerySection");
                section.style.display = (tableName && columnQuery) ? "block" : "none";
            }

            // Load FK columns dynamically
            function loadFKColumns(tableName, selectedColumn = null) {
                if (!tableName) return;
                fetch(`/foProcessDetail/GetFKColumns?tableName=${encodeURIComponent(tableName)}`)
                    .then(res => res.json())
                    .then(data => {
                        fkSelect.innerHTML = '<option value=""></option>';
                        data.forEach(col => {
                            const opt = document.createElement("option");
                            opt.value = col;
                            opt.text = col;
                            if (selectedColumn && col === selectedColumn) {
                                opt.selected = true;
                            }
                            fkSelect.appendChild(opt);
                        });
                    });
            }

            // Test Query logic
            function testQuery() {
                const tableName = tableDropdown.value;
                const columnQuery = columnInput.value;

                fetch('/foProcessDetail/TestQuery', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ tableName, columnQuery })
                })
                    .then(res => res.json())
                    .then(data => {
                        const resultDiv = document.getElementById("queryResult");
                        if (data.success) {
                            resultDiv.innerHTML = "<span class='text-success'>✅ Query is valid!</span>";
                        } else {
                            resultDiv.innerHTML = `<span class='text-danger'>❌ ${data.message}</span>`;
                        }
                    })
                    .catch(err => {
                        document.getElementById("queryResult").innerHTML =
                            `<span class='text-danger'>❌ Error: ${err.message}</span>`;
                    });
            }

            // Event bindings
            tableDropdown.addEventListener("change", () => {
                toggleFields();
                checkTestQueryVisibility();
                loadFKColumns(tableDropdown.value);
            });

            document.getElementById("FormType").addEventListener("change", handleFormTypeChange);
            document.querySelector('[name="Parent"]').addEventListener("change", toggleFKDropdown);
            columnInput.addEventListener("input", checkTestQueryVisibility);
            columnCalcsInput?.addEventListener("input", validateColumnCalcs);

            document.querySelectorAll(".prefix-filter").forEach(radio => {
                radio.addEventListener("change", function () {
                    const selectedPrefix = this.value;
                    const options = tableDropdown.querySelectorAll("option");
                    options.forEach(option => {
                        if (!option.value) return;
                        const optionPrefix = option.getAttribute("data-prefix");
                        option.hidden = (selectedPrefix !== "ALL" && optionPrefix !== selectedPrefix);
                    });
                    tableDropdown.value = "";
                    toggleFields();
                });
            });

            // Initial runs
            toggleFields();
            handleFormTypeChange();
            toggleFKDropdown();
            validateColumnCalcs();
            checkTestQueryVisibility();
            if (tableDropdown.value) loadFKColumns(tableDropdown.value, currentValue);

            // Expose testQuery to global
            window.testQuery = testQuery;
        });
    </script>
}
