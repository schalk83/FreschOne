@model FreschOne.Models.TableCreateViewModel
@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID;
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;

    var breadcrumbParams = ViewBag.DataManagementBreadcrumbX?.Parameters as IDictionary<string, object>;
    var tablenameX = breadcrumbParams != null && breadcrumbParams.ContainsKey("tablename") ? breadcrumbParams["tablename"] : null;
    var descriptionX = breadcrumbParams != null && breadcrumbParams.ContainsKey("description") ? breadcrumbParams["description"] : null;

    var returnURL = ViewBag.ReturnURL;
}


<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", "TableX", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back to @descriptionX</a>
}

<h1>Create New @tableDescription</h1>

@if (!string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
{
    <a href="@Context.Request.Query["returnUrl"]" class="text-decoration-none">← Back</a>
}
else if (ViewBag.DataManagementBreadcrumbY != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>

}
<form method="post" action="@Url.Action("Create", new { userid = userid, PKID = PKID, PKColumn = PKColumn, tablename = Model.TableName,returnURL })" enctype="multipart/form-data" id="createRecordForm">
    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;

        var columnValue = Model.Record.ContainsKey(column) ? Model.Record[column] : null;
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string";
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255;

        var isFoUser = column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase);
        var isAttachment = column.StartsWith("attachment_");
        var isGeo = column.StartsWith("geo_");
        var isFK = Model.ForeignKeys.Any(fk => fk.ColumnName == column);
        var displayValue = Model.Record.ContainsKey($"{column}_Display") ? Model.Record[$"{column}_Display"]?.ToString() : "";
        var foreignKey = isFoUser
            ? new FreschOne.Models.ForeignKeyInfo { ColumnName = "ID", TableName = "foUsers" }
            : Model.ForeignKeys.FirstOrDefault(fk => fk.ColumnName == column);
        var isMaintenance = foreignKey?.TableName?.StartsWith("tbl_md_", StringComparison.OrdinalIgnoreCase) ?? false;

        string label = column;
        if (isFoUser) label = column.Replace("foUserID_", "");
        else if (isAttachment) label = column.Replace("attachment_", "");
        else if (isGeo) label = column.Replace("geo_", "");
        else if (label.EndsWith("ID")) label = label[..^2];
        label = System.Text.RegularExpressions.Regex.Replace(label.Replace("_", " "), "(?<=.)([A-Z])", " $1").Trim();

        <div class="form-group mb-3">
            @if (column == PKColumn)
            {
                <input type="hidden" name="@column" value="@PKID" />
            }
            else if (isAttachment)
            {
                string[] parts = columnValue?.ToString()?.Split(';') ?? new string[2];
                string desc = parts.Length > 0 ? parts[0] : "";
                string path = parts.Length > 1 ? parts[1] : "";

                <label class="fw-bold">@label</label>
                <div class="row mb-2">
                    <div class="col-md-6">
                        <input type="text" id="desc_@column" value="@desc" placeholder="Attachment Description" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />
                    </div>
                </div>
                <input type="hidden" name="@column" id="hidden_@column" value="@desc;@path" />
                @if (!string.IsNullOrEmpty(path))
                {
                    var fileUrl = path.StartsWith("Attachments/") ? Url.Content("~/" + path) : Url.Content("~/Attachments/" + path);
                    <p class="small text-muted">Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(path)</a></p>
                }
            }
            else if (isGeo)
            {
                <label class="fw-bold">@label</label>
                <div class="input-group">
                    <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                    <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                </div>
            }
            else if (isFoUser || isFK)
            {
                <label class="fw-bold">@label</label>

                @if (isMaintenance)
                {
                    var options = Model.ForeignKeyOptions.ContainsKey(foreignKey.ColumnName)
                        ? Model.ForeignKeyOptions[foreignKey.ColumnName]
                        : new List<SelectListItem>();
                    @Html.DropDownList(column, new SelectList(options, "Value", "Text", columnValue), "Select...", new { @class = "form-select" })
                }
                else
                {
                    <div class="input-group">
                        <input type="hidden" name="@column" value="@columnValue" />
                        <input type="text" id="@($"{column}_Display")" value="@displayValue" class="form-control" readonly
                               placeholder="Search..." onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')" />
                        <button type="button" class="btn btn-outline-secondary"
                                onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                }
            }
            else if (columnType == "varchar" && columnLength > 255)
            {
                <label class="fw-bold">@label</label>
                <textarea name="@column" class="form-control">@columnValue</textarea>
            }
            else if (columnType == "varchar")
            {
                <label class="fw-bold">@label</label>
                <input type="text" name="@column" value="@columnValue" class="form-control" />
            }
            else if (columnType == "bit")
            {
                <label class="fw-bold">@label</label>
                <input type="checkbox" name="@column" value="true" class="form-check-input" />
            }
            else if (columnType == "datetime")
            {
                var formatted = DateTime.TryParse(columnValue?.ToString(), out var dt) ? dt.ToString("yyyy-MM-dd") : "";
                <label class="fw-bold">@label</label>
                <input type="date" name="@column" value="@formatted" class="form-control" />
            }
            else
            {
                <label class="fw-bold">@label</label>
                <input type="text" name="@column" value="@columnValue" class="form-control" />
            }
        </div>
    }

    <!-- ➕ Add Attachments (Compact) -->
    <div class="attachment-section p-2 mt-3 rounded border">
        <h6 class="d-flex justify-content-between align-items-center small fw-bold mb-2 toggle-attachments" data-target="attachmentForm" style="cursor: pointer;">
            <span>Add Attachments</span>
            <i class="fas fa-chevron-down toggle-icon" id="toggleIcon"></i>
        </h6>

        <div id="attachmentForm" style="display: none;">
            <div id="attachmentContainer" class="mb-2"></div>

            <button type="button" id="addAttachmentButton" class="btn btn-sm btn-outline-success d-flex align-items-center">
                <i class="bi bi-plus-circle me-1"></i> Add
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
    {
        <a href="@Context.Request.Query["returnUrl"]" class="text-decoration-none">← Back</a>
    }

    <div class="form-group text-center">
        <button type="submit" class="custom-button btn-blue">
            <i class="bi bi-check-circle me-1"></i> Create
        </button>
    </div>
</form>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // 🔄 Toggle Sections (like TableX)
            document.querySelectorAll('.toggle-attachments').forEach(header => {
                header.addEventListener('click', function () {
                    const targetId = this.dataset.target;
                    const target = document.getElementById(targetId);
                    const icon = this.querySelector('.toggle-icon');

                    if (target.style.display === 'none' || target.style.display === '') {
                        target.style.display = 'block';
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    } else {
                        target.style.display = 'none';
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    }
                });
            });

            // 🔁 Update hidden input when attachment fields change
            document.querySelectorAll("[id^=desc_]").forEach(descField => {
                descField.addEventListener("input", function () {
                    let columnName = this.id.replace("desc_", "");
                    updateAttachmentField(columnName);
                });
            });

            function updateAttachmentField(columnName) {
                let descInput = document.getElementById("desc_" + columnName);
                let fileInput = document.getElementById("file_" + columnName);
                let hiddenInput = document.getElementById("hidden_" + columnName);

                let newDescription = descInput.value.trim();
                let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

                let existingValue = hiddenInput.value.split(";");
                let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

                if (filePath === "") filePath = existingFilePath;

                hiddenInput.value = `${newDescription};${filePath}`;
                console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
            }

            // ➕ Add new attachment group
            document.getElementById('addAttachmentButton').addEventListener('click', function () {
                var container = document.getElementById('attachmentContainer');
                var attachmentGroup = document.createElement('div');
                attachmentGroup.classList.add('attachment-group', 'd-flex', 'align-items-center', 'mt-2');

                attachmentGroup.innerHTML = `
                    <div class="row w-100">
                        <div class="col-md-6">
                            <input type="text" name="AttachmentDescriptions" placeholder="Description" class="form-control attachment-field" required />
                        </div>
                        <div class="col-md-5">
                            <input type="file" name="Attachments" class="form-control attachment-field" required />
                        </div>
                        <div class="col-md-1 d-flex align-items-center justify-content-end">
                            <button type="button" class="btn btn-link text-danger removeAttachmentButton" title="Remove Attachment">
                                <i class="bi bi-trash-fill fs-5"></i>
                            </button>
                        </div>
                    </div>
                `;

                container.appendChild(attachmentGroup);
            });

            // ❌ Remove attachment group on click
            document.addEventListener('click', function (event) {
                if (event.target.closest('.removeAttachmentButton')) {
                    event.target.closest('.attachment-group').remove();
                }
            });

            // ✅ Validate required fields before form submit
            document.getElementById('createRecordForm')?.addEventListener('submit', function (event) {
                var attachmentForm = document.getElementById('attachmentForm');
                var attachmentFields = document.querySelectorAll('.attachment-field');

                if (attachmentForm.style.display !== 'none') {
                    let allFieldsFilled = true;
                    attachmentFields.forEach(function (field) {
                        if (!field.value.trim()) {
                            allFieldsFilled = false;
                        }
                    });

                    if (!allFieldsFilled) {
                        alert('Please fill in all required attachment details before submitting.');
                        event.preventDefault();
                        return;
                    }
                }
            });

            // 📍 Geolocation support
            window.getLocation = function(fieldId) {
                if (!navigator.geolocation) {
                    alert("Geolocation is not supported by your browser.");
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    position => {
                        const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                        document.getElementById(fieldId).value = coords;
                    },
                    error => {
                        alert("Unable to retrieve your location.");
                        console.error("Geolocation error:", error);
                    }
                );
            };

        });
    </script>
}