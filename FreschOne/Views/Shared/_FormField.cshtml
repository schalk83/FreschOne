@model FreschOne.Models.FormFieldModel

@{
    var fieldName = $"{Model.TableName}_{Model.Column}";
    var column = Model.Column;
    var columnValue = Model.ColumnValue;
    var columnType = Model.ColumnType;
    var columnLength = Model.ColumnLength;
    var foreignKeys = Model.ForeignKeys;
    var foreignKeyOptions = Model.ForeignKeyOptions;
}

@if (column.StartsWith("attachment_"))
{
    string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
    string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
    string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";
    string fileUrl = !string.IsNullOrEmpty(attachmentFilePath) && attachmentFilePath.StartsWith("Attachments/")
        ? Url.Content("~/" + attachmentFilePath)
        : (!string.IsNullOrEmpty(attachmentFilePath) ? Url.Content("~/Attachments/" + attachmentFilePath) : "");

    <div class="attachment-group mb-0">
        <div class="flex-fill">
            <input type="text" id="desc_@column" placeholder="Attachment Description" value="@attachmentDescription" class="form-control" />
        </div>
        <div class="flex-fill">
            <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />
        </div>
        @if (!string.IsNullOrEmpty(attachmentFilePath))
        {
            <div>
                <a href="@fileUrl" target="_blank" class="btn btn-sm btn-outline-secondary">@System.IO.Path.GetFileName(attachmentFilePath)</a>
            </div>
        }
    </div>

    <input type="hidden" name="@fieldName" id="hidden_@column" value="@attachmentDescription;@attachmentFilePath" />
}
else if (foreignKeys != null && foreignKeys.ContainsKey(Model.TableName) && foreignKeys[Model.TableName].Any(fk => fk.ColumnName == column))
{
    var fk = foreignKeys[Model.TableName].First(fk => fk.ColumnName == column);
    var options = foreignKeyOptions.ContainsKey(fk.TableName) ? foreignKeyOptions[fk.TableName] : new List<SelectListItem>();
    @Html.DropDownList(fieldName, new SelectList(options, "Value", "Text", columnValue), new { @class = "form-select" })
}
else if (columnType == "varchar" && columnLength > 255)
{
    <textarea name="@fieldName" class="form-control">@columnValue</textarea>
}
else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
{
    <input type="number" name="@fieldName" value="@columnValue" class="form-control" />
}
else if (columnType == "bit")
{
    <div class="form-check">
        <input type="checkbox" name="@fieldName" class="form-check-input" value="true" @(columnValue == "True" ? "checked" : "") />
    </div>
}
else if (columnType == "datetime")
{
    string formattedDate = DateTime.TryParse(columnValue, out var dtVal) ? dtVal.ToString("yyyy-MM-dd") : "";
    <input type="date" name="@fieldName" value="@formattedDate" class="form-control" />
}
else
{
    <input type="text" name="@fieldName" value="@columnValue" class="form-control" />
}
