@model FreschOne.Models.TableEditViewModel
@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID;
    var PKColumn = ViewBag.PKColumn;
    var editable = readwriteaccess == "RW";
    var tableDescription = ViewBag.tableDescription;
    var relatedTables = (List<Dictionary<string, object>>)ViewBag.RelatedTables;
    var attachments = ViewBag.Attachments as List<Dictionary<string, object>>;
    var pageNumber = ViewBag.pageNumber;
    var breadcrumbParams = ViewBag.DataManagementBreadcrumbX?.Parameters as IDictionary<string, object>;
    var tablenameX = breadcrumbParams != null && breadcrumbParams.ContainsKey("tablename") ? breadcrumbParams["tablename"] : null;
    var descriptionX = breadcrumbParams != null && breadcrumbParams.ContainsKey("description") ? breadcrumbParams["description"] : null;
    var returnURL = ViewBag.ReturnURL;
}

<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", "TableX", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back to @descriptionX</a>
}
<h1>Edit @tableDescription</h1>

@if (ViewBag.DataManagementBreadcrumbY != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>

}
<form method="post" enctype="multipart/form-data" action="@Url.Action("Update", new { id = Model.Record["ID"], PKID = PKID, PKColumn = PKColumn, tablename = Model.TableName, userid = userid, pageNumber = pageNumber,returnURL})">
    <!-- Include hidden ID field -->
    <input type="hidden" name="ID" value="@Model.Record["ID"]" />

    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;  // Skip the ID column

        var columnValue = Model.Record[column];
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string"; // Default to string if not found
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255; // Default length if not found
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label

        <div class="form-group">

            @if (column == PKColumn)
            {
                <label style="display: none;" for="@column">@column</label>
            }
            else if (column.StartsWith("attachment_"))
            {
                <br />
                string columnLabel = formattedColumn.Replace("attachment_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (column.StartsWith("geo_"))
            {
                string columnLabel = formattedColumn.Replace("geo_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                <label class="fw-bold" for="@column">@column.Replace("ID", "")</label>
            }
            else
            {
                <label class="fw-bold" for="@formattedColumn">@formattedColumn</label>
            }


            @if (editable)
            {
                @if (column.StartsWith("attachment_"))
                {
                    string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                    string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                    string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <input type="text"
                                   id="desc_@column"
                                   value="@attachmentDescription"
                                   placeholder="Attachment Description"
                                   class="form-control" />
                        </div>

                        <div class="col-md-6">
                            <input type="file"
                                   name="file_@column"
                                   id="file_@column"
                                   class="form-control"
                                   onchange="updateAttachmentField('@column')" />
                        </div>
                    </div>

                    <input type="hidden"
                           name="@column"
                           id="hidden_@column"
                           value="@attachmentDescription;@attachmentFilePath" />

                    @if (!string.IsNullOrEmpty(attachmentFilePath))
                    {
                        string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                        ? Url.Content("~/" + attachmentFilePath)
                        : Url.Content("~/Attachments/" + attachmentFilePath);

                        <p class="mt-1 small text-muted">
                            Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a>
                        </p>
                    }
                }
                else if (column.StartsWith("geo_"))
                {
                    <div class="input-group">
                        <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                        <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                    </div>
                }
                else if (columnType == "varchar" && columnLength <= 255)
                {
                    @if (column.StartsWith("attachment_"))
                    {
                        <input type="text" name="@column" style="display: none;" value="@columnValue" class="form-control" />

                    }
                    else
                    {
                        <input type="text" name="@column" value="@columnValue" class="form-control" />
                    }
                }
                else if (columnType == "varchar" && columnLength > 255)
                {
                    @if (column.StartsWith("attachment_"))
                    {
                        <textarea name="@column" class="form-control" style="display: none;">@columnValue</textarea>

                    }
                    else
                    {
                        <textarea name="@column" class="form-control">@columnValue</textarea>
                    }
                }
                else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
                {
                    var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);
                    @Html.DropDownList(
                             foreignKey.ColumnName,
                             new SelectList(
                             Model.ForeignKeyOptions[foreignKey.ColumnName],
                             "Value", "Text", columnValue),
                             "Select...",
                             new { @class = "form-control" })
                }
                else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
                {
                    if (@column == PKColumn)
                    {
                        <input type="hidden" name="@column" value="@columnValue" class="form-control" />
                    }
                    else
                    {
                        <input type="number" name="@column" value="@columnValue" class="form-control" />

                    }
                }
                else if (columnType == "bit")
                {
                    <input type="checkbox" name="@column" value="true" class="form-check-input"
                    @if (columnValue != DBNull.Value && (bool)columnValue)
                    {
                        <text>checked</text>
                    } />
                }
                else if (columnType == "datetime")
                {
                    string formattedDate = columnValue != null ? DateTime.TryParse(columnValue.ToString(), out var dateValue)
                    ? dateValue.ToString("yyyy-MM-dd") : "" : "";
                    <input type="date" name="@column" value="@formattedDate" class="form-control" />
                }
                
            }
            else
            {
                @if (column.StartsWith("attachment_"))
                {
                    string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                    string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                    string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                    <label>Attachment Description</label>
                    <input type="text" id="desc_@column" value="@attachmentDescription" class="form-control" />

                    <label>Upload Attachment</label>
                    <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />

                    <!-- ✅ This hidden input ensures only ONE field (attachment_StudentPass) is sent -->
                    <input type="hidden" name="@column" id="hidden_@column" value="@attachmentDescription;@attachmentFilePath" />

                    @if (!string.IsNullOrEmpty(attachmentFilePath))
                    {
                        string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                        ? Url.Content("~/" + attachmentFilePath)
                        : Url.Content("~/Attachments/" + attachmentFilePath);

                        <p>Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a></p>
                    }
                }
                <!-- Read-only rendering (using readonly attribute for form elements) -->
                <!-- Read-only rendering (using readonly attribute for form elements) -->
                @if (columnType == "varchar" && columnLength <= 255)
                {
                    @if (column.StartsWith("attachment_"))
                    {
                        <input type="text" name="@column" style="display: none;" value="@columnValue" class="form-control" />

                    }
                    else
                    {
                        <input type="text" name="@column" value="@columnValue" class="form-control" />
                    }
                }
                else if (columnType == "varchar" && columnLength > 255)
                {
                    @if (column.StartsWith("attachment_"))
                    {
                        <textarea name="@column" class="form-control" style="display: none;">@columnValue</textarea>

                    }
                    else
                    {
                        <textarea name="@column" class="form-control">@columnValue</textarea>
                    }
                }
                else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
                {
                    var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);
                    @Html.DropDownList(
                             foreignKey.ColumnName,
                             new SelectList(
                             Model.ForeignKeyOptions[foreignKey.ColumnName],
                             "Value", "Text", columnValue),
                             "Select...",
                             new { @class = "form-control", disabled = "disabled" })
                }
                else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
                {
                    if (@column == PKColumn)
                    {
                        <input type="hidden" name="@column" value="@columnValue" class="form-control" />
                    }
                    else
                    {
                        <input type="number" name="@column" value="@columnValue" class="form-control" />

                    }
                }
                else if (columnType == "bit")
                {
                    <input type="checkbox" name="@column" value="true" class="form-check-input"
                    @if (columnValue != DBNull.Value && (bool)columnValue)
                    {
                        <text>checked</text>
                    } disabled />
                }
                else if (columnType == "datetime")
                {
                    string formattedDate = columnValue != null ? DateTime.TryParse(columnValue.ToString(), out var dateValue)
                    ? dateValue.ToString("yyyy-MM-dd") : "" : "";
                    <input type="date" name="@column" value="@formattedDate" class="form-control" readonly />
                }
               
            }
        </div>
    }

    <br />
    
    @if (ViewBag.DataManagementBreadcrumbY != null)
    {
        <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back</a>

    }
    @if (editable)  
    {
        <!-- Only show Save button if editable -->
        <div class="form-group text-center">
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    }
    <br />
</form>

<!-- 🗂 Existing Attachments -->
<div class="attachment-section p-3 mb-4 rounded">
    <h4 class="d-flex justify-content-between align-items-center">
        Existing Attachments
        <button type="button" id="toggleExistingAttachments" class="btn btn-link" style="font-size: 1.2em;">
            <i class="fas fa-chevron-down" id="existingIcon"></i>
        </button>
    </h4>

    <div id="existingAttachments" style="margin-bottom: 10px; display: none;">
        <ul class="list-group">
            @foreach (var attachment in attachments)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        <a href="@attachment["Attachment"]" target="_blank">@attachment["AttachmentDescription"]</a>
                    </span>
                    <label>@attachment["DateAdded"]</label>
                    <label>@attachment["UserAdded"]</label>
                    <form asp-action="DeleteAttachment" method="post" class="d-inline" onsubmit="return confirmDelete();">
                        <input type="hidden" name="attachmentId" value="@attachment["ID"]" />
                        <input type="hidden" name="tablename" value="@ViewBag.tablename" />
                        <input type="hidden" name="PKColumn" value="@ViewBag.PKColumn" />
                        <input type="hidden" name="id" value="@Model.Record["ID"]" />
                        <input type="hidden" name="PKID" value="@PKID" />
                        <input type="hidden" name="userid" value="@userid" />
                        <button type="submit" class="btn btn-link text-danger" title="Delete Attachment">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </form>
                </li>
            }
        </ul>
    </div>
</div>

<!-- 🆕 Add New Attachments -->
<div class="attachment-section p-3 mb-4 rounded">
    <h4 class="d-flex justify-content-between align-items-center">
        Add New Attachments
        <button type="button" id="toggleAttachmentForm" class="btn btn-link" style="font-size: 1.2em;">
            <i class="fas fa-chevron-down" id="toggleIcon"></i>
        </button>
    </h4>

    <form asp-action="AddAttachments" method="post" enctype="multipart/form-data" id="attachmentForm" style="display: none;">
        <input type="hidden" name="tablename" value="@ViewBag.tablename" />
        <input type="hidden" name="id" value="@Model.Record["ID"]" />
        <input type="hidden" name="userid" value="@userid" />
        <input type="hidden" name="PKColumn" value="@ViewBag.PKColumn" />
        <input type="hidden" name="PKID" value="@PKID" />

        <div id="attachmentContainer">
            <div class="attachment-group d-flex align-items-center">
                <div style="flex-grow: 1;">
                    <div class="form-group">
                        <label for="AttachmentDescription">Attachment Description</label>
                        <input type="text" name="AttachmentDescriptions" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="Attachment">Upload Attachment</label>
                        <input type="file" name="Attachments" class="form-control" required />
                    </div>
                </div>
                <div class="trash-container d-flex align-items-center ps-3">
                    <button type="button" class="btn btn-link text-danger removeAttachmentButton" style="font-size: 1.5em;" title="Remove Attachment">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            </div>
        </div>

        <button type="button" id="addAttachmentButton" class="btn btn-success mt-2" style="font-size: 1.5em; padding: 10px 20px;">
            <i class="fas fa-plus"></i>
        </button>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Upload Attachments</button>
        </div>
    </form>
</div>


@section Scripts {

<!-- Include Font Awesome -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script>
        document.addEventListener("DOMContentLoaded", function () {

        // Toggle Existing Attachments
        document.getElementById('toggleExistingAttachments')?.addEventListener('click', function () {
            var section = document.getElementById('existingAttachments');
            var icon = document.getElementById('existingIcon');

            if (section.style.display === 'none' || section.style.display === '') {
                section.style.display = 'block';
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                section.style.display = 'none';
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        });

        // Toggle Add Attachments Form
        document.getElementById('toggleAttachmentForm')?.addEventListener('click', function () {
            var form = document.getElementById('attachmentForm');
            var icon = document.getElementById('toggleIcon');

            if (form.style.display === 'none') {
                form.style.display = 'block';
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                form.style.display = 'none';
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        });

        // Function to update hidden input field with attachment data
        function updateAttachmentField(columnName) {
            let descInput = document.getElementById("desc_" + columnName);
            let fileInput = document.getElementById("file_" + columnName);
            let hiddenInput = document.getElementById("hidden_" + columnName);

            let newDescription = descInput.value.trim();
            let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

            // ✅ Get the existing file path from hidden input
            let existingValue = hiddenInput.value.split(";");
            let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

            // ✅ If no new file is selected, keep only the previous **file path**
            if (filePath === "") {
                filePath = existingFilePath;
            }

            // ✅ Ensure we replace the previous value completely, without appending
            hiddenInput.value = `${newDescription};${filePath}`;
            console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
        }

        // Ensure the description change updates the hidden field
        document.querySelectorAll("[id^=desc_]").forEach(descField => {
            descField.addEventListener("input", function () {
                let columnName = this.id.replace("desc_", "");
                updateAttachmentField(columnName);
            });
        });

        // Add another attachment dynamically
        document.getElementById('addAttachmentButton').addEventListener('click', function () {
            var container = document.getElementById('attachmentContainer');

            // Generate a unique ID for each new field
            var uniqueId = new Date().getTime();

            var attachmentGroup = document.createElement('div');
            attachmentGroup.classList.add('attachment-group', 'd-flex', 'align-items-center', 'mt-2');

            attachmentGroup.innerHTML = `
                <div style="flex-grow: 1;">
                    <div class="form-group">
                        <label for="desc_${uniqueId}">Attachment Description</label>
                        <input type="text" id="desc_${uniqueId}" name="AttachmentDescriptions[]" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="file_${uniqueId}">Upload Attachment</label>
                        <input type="file" id="file_${uniqueId}" name="Attachments[]" class="form-control" required />
                    </div>
                </div>
                <div class="trash-container" style="display: flex; align-items: center; padding-left: 10px;">
                    <button type="button" class="btn btn-link text-danger removeAttachmentButton" style="font-size: 1.5em;" title="Remove Attachment">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            `;

            container.appendChild(attachmentGroup);
        });

        // Event delegation for dynamically added remove buttons
        document.getElementById('attachmentContainer').addEventListener('click', function (e) {
            if (e.target.closest('.removeAttachmentButton')) {
                e.target.closest('.attachment-group').remove();
            }
        });

        // Confirmation before deleting an attachment
        function confirmDelete() {
            return confirm("Are you sure you want to delete this attachment?");
        }

    });

        function getLocation(fieldId) {
            if (!navigator.geolocation) {
                alert("Geolocation is not supported by your browser.");
                return;
            }

            navigator.geolocation.getCurrentPosition(
                position => {
                    const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                    document.getElementById(fieldId).value = coords;
                },
                error => {
                    alert("Unable to retrieve your location.");
                    console.error("Geolocation error:", error);
                }
            );
        }


</script>
}