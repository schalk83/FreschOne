@model dynamic
@using FreschOne.Models

@{
    ViewData["Title"] = "Execute Step";
    var tables = ViewBag.ReportTables as List<foProcessDetail>;
    var reportData = ViewBag.ReportData as Dictionary<string, List<Dictionary<string, object>>>;
    var tableDescriptions = ViewBag.TableDescriptions as Dictionary<string, string>;
    int userId = ViewBag.userid;
    int? processInstanceId = ViewBag.processInstanceId;
    int stepId = ViewBag.stepId;
    var foreignKeys = ViewBag.ForeignKeys as Dictionary<string, List<ForeignKeyInfo>>;
    var foreignKeyOptions = ViewBag.ForeignKeyOptions as Dictionary<string, List<SelectListItem>>;
    var columnTypes = ViewBag.ColumnTypes as Dictionary<string, Dictionary<string, string>>;
    var columnLengths = ViewBag.ColumnLengths as Dictionary<string, Dictionary<string, int>>;
    var rowCounts = ViewBag.RowCounts as Dictionary<string, int> ?? new Dictionary<string, int>();
}

@if (TempData["RowErrors"] is List<string> errors && errors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<partial name="_Sidebar" />

<h2 class="mb-3">Step @ViewBag.StepNo - @ViewBag.StepDescription</h2>

<form method="post" asp-action="SaveNewStepData" asp-controller="ProcessEvents" enctype="multipart/form-data">
    <input type="hidden" name="userId" value="@userId" />
    <input type="hidden" name="stepId" value="@stepId" />
    @if (processInstanceId != null)
    {
        <input type="hidden" name="processInstanceId" value="@processInstanceId" />
    }

    <div class="accordion" id="stepAccordion">
        @for (int i = 0; i < tables.Count; i++)
        {
            var table = tables[i];
            var tableName = table.TableName;
            var sectionId = $"section_{i}";
            var collapseId = $"collapse_{i}";
            var row = reportData[tableName][0];

            var columns = row.Keys
            .Where(k => !k.Equals("ID", StringComparison.OrdinalIgnoreCase)
            && !k.Equals("Active", StringComparison.OrdinalIgnoreCase)
            && !k.Equals("RecordID", StringComparison.OrdinalIgnoreCase))
            .ToList();

            int rowCount = rowCounts.ContainsKey(tableName) ? rowCounts[tableName] : 1;

            <div class="accordion-item">
                <h2 class="accordion-header" id="@sectionId">
                    <button class="accordion-button collapsed fw-bold fs-5" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId">
                        @table.TableDescription
                    </button>
                </h2>
                <div id="@collapseId" class="accordion-collapse collapse show">
                    <div class="accordion-body">
                        @if (table.FormType == "T")
                        {
                            var model = new DynamicTableViewModel
                    {
                        TableName = tableName,
                        Columns = columns,
                        RowCount = rowCount,
                        StartIndex = 0, // 🟢 CreateStep always starts from 0
                        ColumnTypes = columnTypes.ContainsKey(tableName) ? columnTypes[tableName] : new Dictionary<string, string>(),
                        ColumnLengths = columnLengths.ContainsKey(tableName) ? columnLengths[tableName] : new Dictionary<string, int>(),
                        ForeignKeys = foreignKeys.ContainsKey(tableName) ? foreignKeys[tableName] : new List<ForeignKeyInfo>(),
                        ForeignKeyOptions = foreignKeyOptions,

                    };

                            <table class="table">
                                <thead>
                                    <tr>
                                        <th class="fw-bold">Row No</th>
                                        @foreach (var column in columns)
                                        {
                                             string label = column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase)
                ? column.Replace("foUserID_", "").Replace("_", " ")
                : column.StartsWith("attachment_")
                    ? column.Replace("attachment_", "").Replace("_", " ")
                    : column.StartsWith("geo_")
                        ? column.Replace("geo_", "").Replace("_", " ")
                        : column.EndsWith("ID")
                            ? column[..^2]
                            : column;


                                            label = System.Text.RegularExpressions.Regex.Replace(label.Replace("_", " "), "(?<=.)([A-Z])", " $1");
                                            <th class="fw-bold">@label</th>
                                        }
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="@($"{tableName}_rows")">
                                    @await Html.PartialAsync("_TableRows", model)
                                </tbody>

                                @if (ViewBag.CalculationConfig is Dictionary<string, List<(string Function, string Column)>> calcMap &&
                               calcMap.TryGetValue(tableName, out var calcs) && calcs.Any())
                                {
                                    <tfoot>
                                        <tr>
                                            <td class="fw-bold text-end" colspan="1">Totals:</td>

                                            @foreach (var column in columns)
                                            {
                                                var matchingCalc = calcs.FirstOrDefault(c => c.Column.Equals(column, StringComparison.OrdinalIgnoreCase));
                                                var colLower = column.ToLower();
                                                if (matchingCalc.Function?.ToLower() == "count")
                                                {
                                                    <td class="text-center text-primary fw-bold summary-count"
                                                        data-table="@tableName"
                                                        data-column="@colLower">
                                                        0
                                                    </td>
                                                }
                                                else if (matchingCalc.Function?.ToLower() == "sum")
                                                {
                                                    <td class="text-center text-success fw-bold summary-sum"
                                                        data-table="@tableName"
                                                        data-column="@colLower">
                                                        0
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }

                                            <td></td> <!-- for delete column -->
                                        </tr>
                                    </tfoot>
                                }

                            </table>

                            <input type="hidden" name="RowCount_@tableName" value="@rowCount" />

                            <button type="button"
                                    class="btn btn-sm btn-outline-primary mt-2"
                                    onclick="addRowAjax('@tableName')">
                                ➕ Add Row
                            </button>
                        }
        else if (table.FormType == "F")
        {
            int columnCount = table.ColumnCount.GetValueOrDefault();
            if (columnCount <= 1) columnCount = 1;
            int colWidth = columnCount >= 1 && columnCount <= 12 ? 12 / columnCount : 6;
            int columnRendered = 0;

            while (columnRendered < columns.Count)
            {
                <div class="row">
@for (int j = 0; j < columnCount && columnRendered < columns.Count; j++, columnRendered++)
{
    var column = columns[columnRendered];
    string fieldName = $"{tableName}_{column}";
    var columnValue = row[column]?.ToString();

    string label = column.EndsWith("ID") ? column[..^2] : column;
    label = System.Text.RegularExpressions.Regex.Replace(label, "(?<=.)([A-Z])", " $1");

    string columnType = columnTypes?[tableName].ContainsKey(column) == true ? columnTypes[tableName][column] : "varchar";
    int columnLength = columnLengths?[tableName].ContainsKey(column) == true ? columnLengths[tableName][column] : 255;

    string refreshAttr = "data-refresh=\"true\"";

    <div class="col-md-@colWidth mb-3" data-wrapper="@fieldName">
        @* ─── ATTACHMENT ─────────────────────────────── *@
        @if (column.StartsWith("attachment_"))
        {
            string[] parts = columnValue?.Split(';') ?? new string[2];
            string desc = parts[0];
            string path = parts.Length > 1 ? parts[1] : "";
            string url = !string.IsNullOrEmpty(path) ? Url.Content("~/Attachments/" + path) : "";

            <label class="fw-bold">@label.Replace("attachment_", "").Replace("_", " ")</label>
            <div class="attachment-group">
                <input type="text" name="desc_@fieldName" value="@desc" class="form-control" />
                <input type="file" name="file_@fieldName" class="form-control" onchange="updateAttachmentField('@fieldName')" />
            </div>
            @if (!string.IsNullOrEmpty(path))
            {
                <a href="@url" target="_blank" class="btn btn-sm btn-outline-secondary">@System.IO.Path.GetFileName(path)</a>
            }
            <input type="hidden" name="@fieldName" value="@desc;@path" />
        }
        @* ─── FK / USER PICKERS ───────────────────────── *@
        else if ((foreignKeys?.ContainsKey(tableName) == true && foreignKeys[tableName].Any(fk => fk.ColumnName == column)) ||
                  column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
        {
            @* Keep existing FK rendering block here (as you already have) *@
        }
        @* ─── LONG VARCHAR ───────────────────────────── *@
        else if (columnType == "varchar" && columnLength > 255)
        {
            <label class="fw-bold" for="@fieldName">@label</label>
            <textarea id="@fieldName"
                      name="@fieldName"
                      class="form-control"
                      data-field="@fieldName"
                      data-tablename="@tableName"
                      @Html.Raw(refreshAttr)>@columnValue</textarea>
        }
        @* ─── NUMBER ─────────────────────────────────── *@
        else if (columnType is "int" or "bigint" or "decimal")
        {
            <label class="fw-bold" for="@fieldName">@label</label>
            <input type="number"
                   id="@fieldName"
                   name="@fieldName"
                   class="form-control input-short"
                   value="@columnValue"
                   data-field="@fieldName"
                   data-tablename="@tableName"

                   @Html.Raw(refreshAttr) />
        }
        @* ─── CHECKBOX (bit) ─────────────────────────── *@
        else if (columnType == "bit")
        {
            <div class="form-check">
                <input type="checkbox"
                       id="@fieldName"
                       name="@fieldName"
                       class="form-check-input"
                       value="true"
                       @(columnValue == "True" ? "checked" : "")
                       data-field="@fieldName"
                       data-tablename="@tableName"

                       @Html.Raw(refreshAttr) />
                <label class="form-check-label fw-bold" for="@fieldName">@label</label>
            </div>
        }
        @* ─── DATE ───────────────────────────────────── *@
        else if (columnType == "datetime")
        {
            var formatted = DateTime.TryParse(columnValue, out var dt) ? dt.ToString("yyyy-MM-dd") : "";
            <label class="fw-bold" for="@fieldName">@label</label>
            <input type="date"
                   id="@fieldName"
                   name="@fieldName"
                   class="form-control input-short"
                   value="@formatted"
                   data-field="@fieldName"
                       data-tablename="@tableName"

                   @Html.Raw(refreshAttr) />
        }
        @* ─── GEO TAG ────────────────────────────────── *@
        else if (column.StartsWith("geo_"))
        {
            var cleanLabel = label.Replace("geo_", "").Replace("_", " ");
            <label class="fw-bold" for="@fieldName">@cleanLabel</label>
            <div class="input-group">
                <input type="text"
                       id="@fieldName"
                       name="@fieldName"
                       class="form-control"
                       placeholder="Latitude, Longitude"
                       value="@columnValue"
                       data-field="@fieldName"
                           data-tablename="@tableName"

                       @Html.Raw(refreshAttr) />
                <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@fieldName')">📍</button>
            </div>
        }
        @* ─── DEFAULT TEXT ───────────────────────────── *@
        else
        {
            <label class="fw-bold" for="@fieldName">@label</label>
            <input type="text"
                   id="@fieldName"
                   name="@fieldName"
                   class="form-control"
                   value="@columnValue"
                   data-field="@fieldName"
                       data-tablename="@tableName"

                   @Html.Raw(refreshAttr) />
        }
    </div> <!-- .col -->
}
                </div> <!-- .row -->
            }
        }
                    </div>
                </div>
            </div>
        }
    </div>

    <hr class="my-4" />

    <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" value="true" id="sendForApprovalCheckbox" name="SendForApproval" />
        <label class="form-check-label fw-bold" for="sendForApprovalCheckbox">
            Send for Approval?
        </label>
    </div>

    <div id="approvalOptions" style="display:none;">
        <label for="approvalUsers" class="form-label fw-bold">Select Approvers:</label>
        <select id="approvalUsers" name="SelectedApproverIds" class="form-select" multiple="multiple" style="width: 100%;">
            @foreach (var user in ViewBag.UserList as List<SelectListItem>)
            {
                <option value="@user.Value">@user.Text</option>
            }
        </select>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <button type="submit" name="action" value="SaveLater" class="btn custom-button btn-gold" onclick="showLoading();">
            Save & Continue Later
        </button>
        <button type="submit" name="action" value="SaveContinue" class="btn custom-button btn-green" onclick="showLoading();">
            Submit & Proceed
        </button>
    </div>


    <div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(255,255,255,0.7); z-index:9999; justify-content:center; align-items:center; opacity:0; transition: opacity 0.3s;">
        <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#approvalUsers').select2({ placeholder: "Select users for approval...", allowClear: true });
            $('#sendForApprovalCheckbox').on('change', function () {
                if (this.checked) {
                    $('#approvalOptions').slideDown();
                } else {
                    $('#approvalOptions').slideUp();
                    $('#approvalUsers').val(null).trigger('change');
                }
            });

            resizeDropdowns();
            hookRefreshHandlers(); // 🟢 New: Setup Refresh triggers
        });

        function hookRefreshHandlers () {
            // Anything that carries data-refresh="true"
            document.querySelectorAll('[data-refresh="true"]').forEach(el => {
                /* guard against duplicate binding */
                if (el.dataset._refreshBound) return;
                el.addEventListener('change', () => {
                    const fieldName = el.getAttribute('data-field');
                    const tableName = el.getAttribute("data-tablename");

                    if (!fieldName || !tableName) return;

                    triggerRefresh(tableName, fieldName);
                });
                el.dataset._refreshBound = "1";
            });
        }

        async function triggerRefresh(tableName, changedField) {
            const row = {};
            document.querySelectorAll(`[data-field^="${tableName}_"]`).forEach(el => {
                const name = el.getAttribute("data-field");
                if (!name) return;
                row[name] = el.type === "checkbox" ? el.checked : el.value;
            });

            try {
                const response = await fetch('/foEventLogic/RefreshAsync?changedField=' + encodeURIComponent(changedField), {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ TableName: tableName, Row: row })
                });

                if (!response.ok) throw new Error("Refresh failed");

                const result = await response.json();
                for (const [fieldName, fieldData] of Object.entries(result)) {
                    const input = document.querySelector(`[data-field="${fieldName}"]`);
                    const wrapper = document.querySelector(`[data-wrapper="${fieldName}"]`);

                    if (input) {
                        if (fieldData.value !== undefined && input.value !== fieldData.value) {
                            input.value = fieldData.value;
                        }
                        if (fieldData.readOnly !== undefined) {
                            input.readOnly = fieldData.readOnly;
                            input.disabled = fieldData.readOnly;
                        }
                    }

                    if (wrapper && fieldData.visible !== undefined) {
                        wrapper.style.display = fieldData.visible ? "" : "none";
                    }
                }

            } catch (err) {
                console.error("Refresh error", err);
            }
        }

        function updateAttachmentField(fullKey) {
            const descInput = document.getElementById('desc_' + fullKey);
            const fileInput = document.getElementById('file_' + fullKey);
            const hiddenInput = document.getElementById('hidden_' + fullKey);

            const description = descInput && descInput.value ? descInput.value.trim() : "No Description";
            const fileName = fileInput && fileInput.files && fileInput.files.length > 0 ? fileInput.files[0].name : "";
            const tableName = fullKey.split('_').slice(0, -1).join('_');
            const virtualPath = fileName ? `Attachments/${tableName}/${fileName}` : "";
            if (hiddenInput) hiddenInput.value = `${description};${virtualPath}`;
        }

        document.addEventListener("change", function (e) {
            if (e.target && e.target.matches("input[type='file'][name^='file_']")) {
                const fullKey = e.target.name.replace("file_", "");
                updateAttachmentField(fullKey);
            }
        });

        function getLocation(fieldId) {
            if (!navigator.geolocation) return alert("Geolocation not supported.");
            navigator.geolocation.getCurrentPosition(
                pos => {
                    const coords = `${pos.coords.latitude.toFixed(6)}, ${pos.coords.longitude.toFixed(6)}`;
                    document.getElementById(fieldId).value = coords;
                },
                err => alert("Unable to retrieve location.")
            );
        }

        function resizeDropdowns() {
            document.querySelectorAll("select.form-select").forEach(select => {
                const span = document.createElement("span");
                span.style.visibility = "hidden";
                span.style.position = "absolute";
                span.style.whiteSpace = "nowrap";
                span.style.font = getComputedStyle(select).font;

                let longest = "";
                Array.from(select.options).forEach(opt => {
                    if (opt.text.length > longest.length) longest = opt.text;
                });

                span.textContent = longest;
                document.body.appendChild(span);
                select.style.width = span.offsetWidth + 50 + "px";
                document.body.removeChild(span);
            });
        }

        function recalculateSummaries(tableName) {
            const rows = document.querySelectorAll(`#${tableName}_rows tr`);
            const calcs = {};

            rows.forEach(row => {
                row.querySelectorAll("input[name], select[name], textarea[name]").forEach(input => {
                    const name = input.name;
                    const suffix = name.match(/_(\d+)$/);
                    if (!suffix || !name.startsWith(tableName + "_")) return;
                    const col = name.replace(tableName + "_", "").replace(/_\d+$/, "").toLowerCase();
                    const val = input.value;
                    if (!calcs[col]) calcs[col] = { sum: 0, count: 0 };
                    if (!isNaN(parseFloat(val))) calcs[col].sum += parseFloat(val);
                    if (val && val.trim()) calcs[col].count++;
                });
            });

            for (const [col, { sum, count }] of Object.entries(calcs)) {
                const sumCell = document.querySelector(`.summary-sum[data-table='${tableName}'][data-column='${col}']`);
                const countCell = document.querySelector(`.summary-count[data-table='${tableName}'][data-column='${col}']`);
                if (sumCell) sumCell.textContent = sum.toFixed(2);
                if (countCell) countCell.textContent = count;
            }
        }

        function removeRow(button) {
            const row = button.closest('tr');
            const tbody = row.parentElement;
            const tableName = tbody.id.replace("_rows", "");
            if (tbody.querySelectorAll("tr").length > 1) {
                row.remove();
                updateRowIndices(tbody);
                recalculateSummaries(tableName);
            }
        }

        function updateRowIndices(tbody) {
            tbody.querySelectorAll('tr').forEach((row, index) => {
                row.setAttribute('data-row-index', index);
                const rowNo = row.querySelector('.row-no');
                if (rowNo) rowNo.innerText = index + 1;

                row.querySelectorAll('[name], [id], [for]').forEach(el => {
                    ['name', 'id', 'for'].forEach(attr => {
                        const val = el.getAttribute(attr);
                        if (val) el.setAttribute(attr, val.replace(/_(\d+)$/, `_${index}`));
                    });
                });
            });
        }

        function addRowAjax(tableName) {
            const stepId = document.querySelector('input[name="stepId"]').value;
            const userId = document.querySelector('input[name="userId"]').value;
            const processId = document.querySelector('input[name="processInstanceId"]') ? document.querySelector('input[name="processInstanceId"]').value : null;
            const rowContainer = document.querySelector(`#${tableName}_rows`);
            const currentRowCount = rowContainer ? rowContainer.querySelectorAll("tr").length : 0;

            const data = { tableName, stepId, userId, processInstanceId: processId, currentRowCount };

            fetch('/ProcessEvents/AddTableRowPartial', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(data)
            })
            .then(res => res.text())
            .then(html => {
                rowContainer.insertAdjacentHTML("beforeend", html);
                const lastRow = rowContainer.lastElementChild;
                if (lastRow) {
                    lastRow.querySelectorAll("input[name], select[name], textarea[name]").forEach(el => {
                        el.addEventListener("input", () => recalculateSummaries(tableName));
                    });
                }
                recalculateSummaries(tableName);
                hookRefreshHandlers(); // 🟢 Rebind after row added
            })
            .catch(err => console.error("Add Row Error:", err));
        }

    </script>
}


