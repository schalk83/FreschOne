@model FreschOne.Models.TableCreateViewModel
@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID;
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;

    var breadcrumbParams = ViewBag.DataManagementBreadcrumbX?.Parameters as IDictionary<string, object>;
    var tablenameX = breadcrumbParams != null && breadcrumbParams.ContainsKey("tablename") ? breadcrumbParams["tablename"] : null;
    var descriptionX = breadcrumbParams != null && breadcrumbParams.ContainsKey("description") ? breadcrumbParams["description"] : null;

    var returnURL = ViewBag.ReturnURL;
}


<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", "TableX", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back to @descriptionX</a>
}

<h1>Create New @tableDescription</h1>

@if (!string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
{
    <a href="@Context.Request.Query["returnUrl"]" class="text-decoration-none">← Back</a>
}
else if (ViewBag.DataManagementBreadcrumbY != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>

}
<form method="post" action="@Url.Action("Create", new { userid = userid, PKID = PKID, PKColumn = PKColumn, tablename = Model.TableName,returnURL })" enctype="multipart/form-data" id="createRecordForm">
    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;  // Skip the ID column, it should be auto-generated

        var columnValue = Model.Record.ContainsKey(column) ? Model.Record[column] : null;
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string"; // Default to string if not found
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255; // Default length if not found
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label

        <div class="form-group">
            @if (column == PKColumn)
            {
                <label style="display: none;" for="@column">@column</label>
            }
            else if (column.StartsWith("attachment_"))
            {
                <br />
                string columnLabel = formattedColumn.Replace("attachment_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (column.StartsWith("geo_"))
            {
                string columnLabel = formattedColumn.Replace("geo_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                <label class="fw-bold" for="@column">@column.Replace("ID", "")</label>
            }
            else
            {
                <label class="fw-bold" for="@formattedColumn">@formattedColumn</label>
            }


            @if (column.StartsWith("attachment_"))
            {
                string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                <div class="row mb-2">
                    <div class="col-md-6">
                        <input type="text"
                               id="desc_@column"
                               value="@attachmentDescription"
                               placeholder="Attachment Description"
                               class="form-control" />
                    </div>

                    <div class="col-md-6">
                        <input type="file"
                               name="file_@column"
                               id="file_@column"
                               class="form-control"
                               onchange="updateAttachmentField('@column')" />
                    </div>
                </div>

                <input type="hidden"
                       name="@column"
                       id="hidden_@column"
                       value="@attachmentDescription;@attachmentFilePath" />

                @if (!string.IsNullOrEmpty(attachmentFilePath))
                {
                    string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                    ? Url.Content("~/" + attachmentFilePath)
                    : Url.Content("~/Attachments/" + attachmentFilePath);

                    <p class="mt-1 small text-muted">
                        Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a>
                    </p>
                }
            }

            else if (column.StartsWith("geo_"))
            {
                <div class="input-group">
                    <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                    <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                </div>
            }

            @if (columnType == "varchar" && columnLength <= 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <input type="text" name="@column" style="display: none;" value="@columnValue" class="form-control" />

                }
                else
                {
                    <input type="text" name="@column" value="@columnValue" class="form-control" />
                }
            }
            else if (columnType == "varchar" && columnLength > 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <textarea name="@column" class="form-control" style="display: none;">@columnValue</textarea>

                }
                else
                {
                    <textarea name="@column" class="form-control">@columnValue</textarea>
                }
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);
                var isMaintenance = foreignKey.TableName.StartsWith("tbl_md_", StringComparison.OrdinalIgnoreCase);
                var displayValue = Model.Record.ContainsKey($"{column}_Display") ? Model.Record[$"{column}_Display"]?.ToString() : "";

                <label for="@column" class="fw-bold">@column.Replace("ID", "")</label>

                @if (isMaintenance)
                {
                    @Html.DropDownList(column,
                             new SelectList(Model.ForeignKeyOptions[foreignKey.ColumnName], "Value", "Text", columnValue),
                             "Select...",
                             new { @class = "form-select" })
                }
                else
                {
                    <div class="input-group">
                        <input type="hidden" name="@column" value="@columnValue" />
                        <input type="text" id="@column" value="@displayValue" class="form-control" readonly placeholder="Search..."
                               onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')" />
                        <button type="button" class="btn btn-outline-secondary"
                                onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                }
            }

            else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
            {
                if (@column == PKColumn)
                {
                    <input style="display: none;" name="@column" value="@PKID" class="form-control" />
                }
                else
                {
                    <input type="number" name="@column" value="@columnValue" class="form-control" />

                }
                <!-- Render number input for int or decimal columns -->
            }
            else if (columnType == "bit")
            {
                <!-- Render checkbox for bit columns, handle DBNull -->
                <input type="checkbox" name="@column" value="true" class="form-check-input" />

            }
            else if (columnType == "datetime")
            {
                <!-- Render date picker for datetime columns -->
                string formattedDate = columnValue != null ? DateTime.TryParse(columnValue.ToString(), out var dateValue)
                ? dateValue.ToString("yyyy-MM-dd") : "" : ""; // If the value is null, set it to an empty string
                <input type="date" name="@column" value="@formattedDate" class="form-control" />
            }

        </div>
    }

    <!-- ➕ Add Attachments (Compact) -->
    <div class="attachment-section p-2 mt-3 rounded border">
        <h6 class="d-flex justify-content-between align-items-center small fw-bold mb-2 toggle-attachments" data-target="attachmentForm" style="cursor: pointer;">
            <span>Add Attachments</span>
            <i class="fas fa-chevron-down toggle-icon" id="toggleIcon"></i>
        </h6>

        <div id="attachmentForm" style="display: none;">
            <div id="attachmentContainer" class="mb-2"></div>

            <button type="button" id="addAttachmentButton" class="btn btn-sm btn-outline-success d-flex align-items-center">
                <i class="bi bi-plus-circle me-1"></i> Add
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Context.Request.Query["returnUrl"]))
    {
        <a href="@Context.Request.Query["returnUrl"]" class="text-decoration-none">← Back</a>
    }

    <div class="form-group text-center">
        <button type="submit" class="custom-button btn-blue">
            <i class="bi bi-check-circle me-1"></i> Create
        </button>
    </div>

</form>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // 🔄 Toggle Sections (like TableX)
            document.querySelectorAll('.toggle-attachments').forEach(header => {
                header.addEventListener('click', function () {
                    const targetId = this.dataset.target;
                    const target = document.getElementById(targetId);
                    const icon = this.querySelector('.toggle-icon');

                    if (target.style.display === 'none' || target.style.display === '') {
                        target.style.display = 'block';
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    } else {
                        target.style.display = 'none';
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    }
                });
            });

            // 🔁 Update hidden input when attachment fields change
            document.querySelectorAll("[id^=desc_]").forEach(descField => {
                descField.addEventListener("input", function () {
                    let columnName = this.id.replace("desc_", "");
                    updateAttachmentField(columnName);
                });
            });

            function updateAttachmentField(columnName) {
                let descInput = document.getElementById("desc_" + columnName);
                let fileInput = document.getElementById("file_" + columnName);
                let hiddenInput = document.getElementById("hidden_" + columnName);

                let newDescription = descInput.value.trim();
                let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

                let existingValue = hiddenInput.value.split(";");
                let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

                if (filePath === "") filePath = existingFilePath;

                hiddenInput.value = `${newDescription};${filePath}`;
                console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
            }

            // ➕ Add new attachment group
            document.getElementById('addAttachmentButton').addEventListener('click', function () {
                var container = document.getElementById('attachmentContainer');
                var attachmentGroup = document.createElement('div');
                attachmentGroup.classList.add('attachment-group', 'd-flex', 'align-items-center', 'mt-2');

                attachmentGroup.innerHTML = `
                    <div class="row w-100">
                        <div class="col-md-6">
                            <input type="text" name="AttachmentDescriptions" placeholder="Description" class="form-control attachment-field" required />
                        </div>
                        <div class="col-md-5">
                            <input type="file" name="Attachments" class="form-control attachment-field" required />
                        </div>
                        <div class="col-md-1 d-flex align-items-center justify-content-end">
                            <button type="button" class="btn btn-link text-danger removeAttachmentButton" title="Remove Attachment">
                                <i class="bi bi-trash-fill fs-5"></i>
                            </button>
                        </div>
                    </div>
                `;

                container.appendChild(attachmentGroup);
            });

            // ❌ Remove attachment group on click
            document.addEventListener('click', function (event) {
                if (event.target.closest('.removeAttachmentButton')) {
                    event.target.closest('.attachment-group').remove();
                }
            });

            // ✅ Validate required fields before form submit
            document.getElementById('createRecordForm')?.addEventListener('submit', function (event) {
                var attachmentForm = document.getElementById('attachmentForm');
                var attachmentFields = document.querySelectorAll('.attachment-field');

                if (attachmentForm.style.display !== 'none') {
                    let allFieldsFilled = true;
                    attachmentFields.forEach(function (field) {
                        if (!field.value.trim()) {
                            allFieldsFilled = false;
                        }
                    });

                    if (!allFieldsFilled) {
                        alert('Please fill in all required attachment details before submitting.');
                        event.preventDefault();
                        return;
                    }
                }
            });

            // 📍 Geolocation support
            window.getLocation = function(fieldId) {
                if (!navigator.geolocation) {
                    alert("Geolocation is not supported by your browser.");
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    position => {
                        const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                        document.getElementById(fieldId).value = coords;
                    },
                    error => {
                        alert("Unable to retrieve your location.");
                        console.error("Geolocation error:", error);
                    }
                );
            };

        });
    </script>
}
