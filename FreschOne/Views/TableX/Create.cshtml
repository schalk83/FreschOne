@model FreschOne.Models.TableCreateViewModel

@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID; // Ensure PKID is set after submission
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;
    var relatedTables = (List<Dictionary<string, object>>)ViewBag.RelatedTables;
    var tablenameX = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"];

}


<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back</a>
}
<h1>Create New @tableDescription</h1>


<!-- Main Form for Creating Record and Attachments -->
<form method="post" action="@Url.Action("Create", new { userid = userid, PKColumn = PKColumn, tablename = Model.TableName })" enctype="multipart/form-data" id="createRecordForm">
    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;

        var columnValue = Model.Record.ContainsKey(column) ? Model.Record[column] : null;
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string";
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255;
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label


        <div class="form-group">
            @if (column.StartsWith("attachment_"))
            {
                <br />
                string columnLabel = formattedColumn.Replace("attachment_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (column.StartsWith("geo_"))
            {
                string columnLabel = formattedColumn.Replace("geo_", "").Replace("_", " ");
                <label class="fw-bold">@columnLabel</label>
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                <label class="fw-bold" for="@column">@column.Replace("ID", "")</label>
            }
            else
            {
                <label class="fw-bold" for="@formattedColumn">@formattedColumn</label>
            }



            @if (column.StartsWith("attachment_"))
            {
                string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                <div class="row mb-2">
                    <div class="col-md-6">
                        <input type="text"
                               id="desc_@column"
                               value="@attachmentDescription"
                               placeholder="Attachment Description"
                               class="form-control" />
                    </div>

                    <div class="col-md-6">
                        <input type="file"
                               name="file_@column"
                               id="file_@column"
                               class="form-control"
                               onchange="updateAttachmentField('@column')" />
                    </div>
                </div>

                <input type="hidden"
                       name="@column"
                       id="hidden_@column"
                       value="@attachmentDescription;@attachmentFilePath" />

                @if (!string.IsNullOrEmpty(attachmentFilePath))
                {
                    string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                    ? Url.Content("~/" + attachmentFilePath)
                    : Url.Content("~/Attachments/" + attachmentFilePath);

                    <p class="mt-1 small text-muted">
                        Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a>
                    </p>
                }
            }
            else if (column.StartsWith("geo_"))
            {
                <div class="input-group">
                    <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                    <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                </div>
            }
            else if (columnType == "varchar" && columnLength <= 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <input type="text" name="@column" style="display: none;" value="@columnValue" class="form-control" />

                }
                else
                {
                    <input type="text" name="@column" value="@columnValue" class="form-control" />
                }
            }
            else if (columnType == "varchar" && columnLength > 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <textarea name="@column" class="form-control" style="display: none;">@columnValue</textarea>

                }
                else
                {
                    <textarea name="@column" class="form-control">@columnValue</textarea>
                }            
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);
                @Html.DropDownList(
                         foreignKey.ColumnName,
                         new SelectList(Model.ForeignKeyOptions[foreignKey.ColumnName], "Value", "Text", columnValue),
                         "Select...", new { @class = "form-control" })
            }
            else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
            {
                <input type="number" name="@column" value="@columnValue" class="form-control" />
            }
            else if (columnType == "bit")
            {
                <input type="checkbox" name="@column" value="true" class="form-check-input" />
            }
            else if (columnType == "datetime")
            {
                string formattedDate = columnValue != null ? DateTime.TryParse(columnValue.ToString(), out var dateValue)
                ? dateValue.ToString("yyyy-MM-dd") : "" : "";
                <input type="date" name="@column" value="@formattedDate" class="form-control" />
            }
        </div>
    }

    <!-- Attachments Section -->
    <div class="attachment-section p-3 mt-4 rounded">
        <h4 class="d-flex justify-content-between align-items-center">
            Add Attachments
            <button type="button" id="toggleAttachmentForm" class="btn btn-link p-0" style="font-size: 1.2em;">
                <i class="fas fa-chevron-down" id="toggleIcon"></i>
            </button>
        </h4>

        <div id="attachmentForm" style="display: none;">
            <div id="attachmentContainer"></div>

            <button type="button" id="addAttachmentButton" class="custom-button btn-green btn-sm mt-3 d-flex align-items-center">
                <i class="bi bi-plus-circle me-1"></i> Add
            </button>
        </div>
    </div>



    @if (ViewBag.DataManagementBreadcrumbX != null)
    {
        <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>
    }

    <div class="form-group text-center">
        <button type="submit" class="custom-button btn-blue">
            <i class="bi bi-check-circle me-1"></i> Create
        </button>
    </div>

    <br />
    <hr />
</form>

@section Scripts {

<!-- JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script>
    document.getElementById('toggleAttachmentForm').addEventListener('click', function () {
        var form = document.getElementById('attachmentForm');
        var icon = document.getElementById('toggleIcon');
        var attachmentFields = document.querySelectorAll('.attachment-field');

        if (form.style.display === 'none') {
            form.style.display = 'block';
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-up');
            attachmentFields.forEach(field => field.setAttribute('required', 'required'));
        } else {
            form.style.display = 'none';
            icon.classList.remove('fa-chevron-up');
            icon.classList.add('fa-chevron-down');
            attachmentFields.forEach(field => field.removeAttribute('required'));
        }
    });

     // Function to update hidden input field with attachment data
        function updateAttachmentField(columnName) {
            let descInput = document.getElementById("desc_" + columnName);
            let fileInput = document.getElementById("file_" + columnName);
            let hiddenInput = document.getElementById("hidden_" + columnName);

            let newDescription = descInput.value.trim();
            let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

            // ✅ Get the existing file path from hidden input
            let existingValue = hiddenInput.value.split(";");
            let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

            // ✅ If no new file is selected, keep only the previous **file path**
            if (filePath === "") {
                filePath = existingFilePath;
            }

            // ✅ Ensure we replace the previous value completely, without appending
            hiddenInput.value = `${newDescription};${filePath}`;
            console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
        }

        // Ensure the description change updates the hidden field
        document.querySelectorAll("[id^=desc_]").forEach(descField => {
            descField.addEventListener("input", function () {
                let columnName = this.id.replace("desc_", "");
                updateAttachmentField(columnName);
            });
        });

            document.getElementById('addAttachmentButton').addEventListener('click', function () {
            var container = document.getElementById('attachmentContainer');
            var attachmentGroup = document.createElement('div');
            attachmentGroup.classList.add('d-flex', 'align-items-center', 'gap-2', 'mb-2');

            attachmentGroup.innerHTML = `
            <div class="row w-100">
                <div class="col-md-6">
                    <input type="text" name="AttachmentDescriptions" placeholder="Description" class="form-control attachment-field" required />
                </div>
                <div class="col-md-5">
                    <input type="file" name="Attachments" class="form-control attachment-field" required />
                </div>
                <div class="col-md-1 d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-link text-danger removeAttachmentButton" title="Remove Attachment">
                        <i class="bi bi-trash-fill fs-5"></i>
                    </button>
                </div>
            </div>
        `;


            container.appendChild(attachmentGroup);
        });


    document.addEventListener('click', function (event) {
        if (event.target.closest('.removeAttachmentButton')) {
            event.target.closest('.attachment-group').remove();
        }
    });

    function getLocation(fieldId) {
            if (!navigator.geolocation) {
                alert("Geolocation is not supported by your browser.");
                return;
            }

            navigator.geolocation.getCurrentPosition(
                position => {
                    const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                    document.getElementById(fieldId).value = coords;
                },
                error => {
                    alert("Unable to retrieve your location.");
                    console.error("Geolocation error:", error);
                }
            );
        }
</script>
}