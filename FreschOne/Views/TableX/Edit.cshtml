@model FreschOne.Models.TableEditViewModel
@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes; // Get column types from ViewBag
    var columnLengths = ViewBag.ColumnLengths; // Get column lengths from ViewBag
    var editable = readwriteaccess == "RW"; // Check if the form should be editable
    var tableDescription = ViewBag.tableDescription;
    var logicLines = ViewBag.LogicLines as List<string>; // Get the logic lines from ViewBag

    var relatedTables = (List<Dictionary<string, object>>)ViewBag.RelatedTables;
    var attachments = ViewBag.Attachments as List<Dictionary<string, object>>;
    var pageNumber = ViewBag.pageNumber;

}

<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>
}
<h1>Edit @tableDescription</h1>

<form method="post" enctype="multipart/form-data" action="@Url.Action("Update", new { id = Model.Record["ID"], tablename = Model.TableName, userid = userid, pageNumber = pageNumber })">
    <!-- Include hidden ID field -->
    <input type="hidden" name="ID" value="@Model.Record["ID"]" />

    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;  // Skip the ID column

        var columnValue = Model.Record[column];
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string"; // Default to string if not found
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255; // Default length if not found
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label

        <div class="form-group">
            @{
                string label = column;

                if (column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                {
                    label = column.Replace("foUserID_", "");
                }
                else if (column.StartsWith("attachment_"))
                {
                    label = column.Replace("attachment_", "");
                }
                else if (column.StartsWith("geo_"))
                {
                    label = column.Replace("geo_", "");
                }
                else if (column.EndsWith("ID", StringComparison.OrdinalIgnoreCase))
                {
                    label = column[..^2];
                }

                label = System.Text.RegularExpressions.Regex.Replace(label.Replace("_", " "), "(?<=.)([A-Z])", " $1").Trim();
            }

            <label class="fw-bold" for="@column">@label</label>

            @if (editable)
            {
                if (column.StartsWith("attachment_"))
                {
                    string[] parts = columnValue?.ToString().Split(';') ?? new string[2];
                    string desc = parts.Length > 0 ? parts[0] : "";
                    string path = parts.Length > 1 ? parts[1] : "";

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <input type="text" id="desc_@column" value="@desc" placeholder="Attachment Description" class="form-control" />
                        </div>
                        <div class="col-md-6">
                            <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />
                        </div>
                    </div>
                    <input type="hidden" name="@column" id="hidden_@column" value="@desc;@path" />
                    @if (!string.IsNullOrEmpty(path))
                    {
                        string url = path.StartsWith("Attachments/")
                        ? Url.Content("~/" + path)
                        : Url.Content("~/Attachments/" + path);
                        <p class="mt-1 small text-muted">Current File: <a href="@url" target="_blank">@System.IO.Path.GetFileName(path)</a></p>
                    }
                }
                else if (column.StartsWith("geo_"))
                {
                    <div class="input-group">
                        <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                        <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                    </div>
                }
                else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column) || column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                {
                    var isFoUser = column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase);
                    var foreignKey = isFoUser
                    ? new FreschOne.Models.ForeignKeyInfo { ColumnName = "ID", TableName = "foUsers" }
                    : Model.ForeignKeys.First(fk => fk.ColumnName == column);

                    var isMaintenance = foreignKey.TableName.StartsWith("tbl_md_", StringComparison.OrdinalIgnoreCase);
                    var displayValue = Model.Record.ContainsKey($"{column}_Display") ? Model.Record[$"{column}_Display"]?.ToString() : "";

                    if (isMaintenance)
                    {
                        var options = Model.ForeignKeyOptions.ContainsKey(foreignKey.ColumnName)
                        ? Model.ForeignKeyOptions[foreignKey.ColumnName]
                        : new List<SelectListItem>();

                        @Html.DropDownList(column,
                                 new SelectList(options, "Value", "Text", columnValue),
                                 "Select...",
                                 new { @class = "form-select" })
                    }
                    else
                    {
                        <div class="input-group">
                            <input type="hidden" name="@column" value="@columnValue" />
                            <input type="text" id="@column" value="@displayValue" class="form-control" readonly placeholder="Search..." onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')" />
                            <button type="button" class="btn btn-outline-secondary" onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    }
                }
                else if (columnType == "varchar" && columnLength > 255)
                {
                    <textarea name="@column" class="form-control">@columnValue</textarea>
                }
                else if (columnType == "varchar")
                {
                    <input type="text" name="@column" value="@columnValue" class="form-control" />
                }
                else if (columnType is "int" or "bigint" or "decimal")
                {
                    <input type="number" name="@column" value="@columnValue" class="form-control" />
                }
                else if (columnType == "bit")
                {
                    <input type="checkbox" name="@column" value="true" class="form-check-input"
                    @(columnValue != DBNull.Value && (bool)columnValue ? "checked" : "") />
                }
                else if (columnType == "datetime")
                {
                    string formattedDate = columnValue != null && DateTime.TryParse(columnValue.ToString(), out var dt)
                    ? dt.ToString("yyyy-MM-dd") : "";
                    <input type="date" name="@column" value="@formattedDate" class="form-control" />
                }
            }
            else
            {
                // 🧊 Read-only fallback
                if (columnType == "varchar" && columnLength > 255)
                {
                    <textarea name="@column" class="form-control" readonly>@columnValue</textarea>
                }
                else if (columnType == "varchar")
                {
                    <input type="text" name="@column" value="@columnValue" class="form-control" readonly />
                }
                else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
                {
                    var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);
                    var options = Model.ForeignKeyOptions[foreignKey.ColumnName];
                    @Html.DropDownList(foreignKey.ColumnName,
                             new SelectList(options, "Value", "Text", columnValue),
                             "Select...",
                             new { @class = "form-select", disabled = "disabled" })
                }
                else if (columnType is "int" or "bigint" or "decimal")
                {
                    <input type="number" name="@column" value="@columnValue" class="form-control" readonly />
                }
                else if (columnType == "bit")
                {
                    <input type="checkbox" class="form-check-input" disabled
                    @(columnValue != DBNull.Value && (bool)columnValue ? "checked" : "") />
                }
                else if (columnType == "datetime")
                {
                    string formattedDate = columnValue != null && DateTime.TryParse(columnValue.ToString(), out var dt)
                    ? dt.ToString("yyyy-MM-dd") : "";
                    <input type="date" name="@column" value="@formattedDate" class="form-control" readonly />
                }
            }
        </div>

    }

   

    @if (ViewBag.DataManagementBreadcrumbX != null)
    {
        <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back</a>
    }
    @if (editable)
    {
        <!-- Only show Save button if editable -->
        <div class="form-group text-center">
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    }

</form>

<!-- 🗂 Existing Attachments -->
<div class="attachment-section p-2 mb-3 rounded border">
    <h6 class="d-flex justify-content-between align-items-center small fw-bold mb-2 toggle-attachments" data-target="existingAttachments" style="cursor: pointer;">
        <span>Existing Attachments</span>
        <i class="fas fa-chevron-down toggle-icon" id="existingIcon"></i>
    </h6>

    <div id="existingAttachments" style="margin-bottom: 8px; display: none;">
        @if (attachments != null && attachments.Any())
        {
            <ul class="list-group list-group-sm">
                @foreach (var attachment in attachments)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center p-2">
                        <div class="d-flex flex-column small">
                            <a href="@attachment["Attachment"]" target="_blank">@attachment["AttachmentDescription"]</a>
                            <span class="text-muted small">@attachment["DateAdded"] | @attachment["UserAdded"]</span>
                        </div>
                        <form asp-action="DeleteAttachment" method="post" class="d-inline" onsubmit="return confirmDelete();">
                            <input type="hidden" name="attachmentId" value="@attachment["ID"]" />
                            <input type="hidden" name="tablename" value="@ViewBag.tablename" />
                            <input type="hidden" name="PKID" value="@ViewBag.id" />
                            <input type="hidden" name="userid" value="@ViewBag.userid" />
                            <button type="submit" class="btn btn-sm btn-link text-danger" title="Delete Attachment">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </form>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted small">No attachments available.</p>
        }
    </div>
</div>

<!-- ➕ Add Attachments -->
<div class="attachment-section p-2 mt-3 rounded border">
    <h6 class="d-flex justify-content-between align-items-center small fw-bold mb-2 toggle-attachments" data-target="attachmentForm" style="cursor: pointer;">
        <span>Add Attachments</span>
        <i class="fas fa-chevron-down toggle-icon" id="toggleIcon"></i>
    </h6>

    <form asp-action="AddAttachments" method="post" enctype="multipart/form-data" id="attachmentForm" style="display: none;">
        <input type="hidden" name="tablename" value="@ViewBag.tablename" />
        <input type="hidden" name="PKID" value="@Model.Record["ID"]" />
        <input type="hidden" name="userid" value="@userid" />

        <div id="attachmentContainer" class="mb-2"></div>

        <button type="button" id="addAttachmentButton" class="btn btn-sm btn-outline-success d-flex align-items-center">
            <i class="bi bi-plus-circle me-1"></i> Add
        </button>
    </form>
</div>

@section Scripts {

<!-- Include Font Awesome -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script>

            // Handle toggles for both Existing and Add Attachments sections
        document.querySelectorAll('.toggle-attachments').forEach(header => {
            header.addEventListener('click', function () {
                const targetId = this.dataset.target;
                const target = document.getElementById(targetId);
                const icon = this.querySelector('.toggle-icon');

                if (target.style.display === 'none' || target.style.display === '') {
                    target.style.display = 'block';
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');
                } else {
                    target.style.display = 'none';
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                }
            });
        });


            function updateAttachmentField(columnName) {
        let descInput = document.getElementById("desc_" + columnName);
        let fileInput = document.getElementById("file_" + columnName);
        let hiddenInput = document.getElementById("hidden_" + columnName);

        let newDescription = descInput.value.trim();
        let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

        // ✅ Get the existing file path from hidden input
        let existingValue = hiddenInput.value.split(";");
        let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

        // ✅ If no new file is selected, keep only the previous **file path**
        if (filePath === "") {
            filePath = existingFilePath;
        }

        // ✅ Ensure we replace the previous value completely, without appending
        hiddenInput.value = `${newDescription};${filePath}`;
        console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
    }

    // ✅ Ensure the description change updates the hidden field
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll("[id^=desc_]").forEach(descField => {
            descField.addEventListener("input", function () {
                let columnName = this.id.replace("desc_", "");
                updateAttachmentField(columnName);
            });
        });
    });

    // Add another attachment dynamically
    document.getElementById('addAttachmentButton').addEventListener('click', function () {
        var container = document.getElementById('attachmentContainer');

        // Create new attachment block
        var attachmentGroup = document.createElement('div');
        attachmentGroup.classList.add('attachment-group', 'd-flex', 'align-items-center', 'mt-2');

        attachmentGroup.innerHTML = `
            <div class="row w-100">
                <div class="col-md-6">
                    <input type="text" name="AttachmentDescriptions" placeholder="Description" class="form-control attachment-field" required />
                </div>
                <div class="col-md-5">
                    <input type="file" name="Attachments" class="form-control attachment-field" required />
                </div>
                <div class="col-md-1 d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-link text-danger removeAttachmentButton" title="Remove Attachment">
                        <i class="bi bi-trash-fill fs-5"></i>
                    </button>
                </div>
            </div>
        `;


        container.appendChild(attachmentGroup);

        // Attach event listener to new remove button
        attachmentGroup.querySelector('.removeAttachmentButton').addEventListener('click', function () {
            attachmentGroup.remove();
        });
    });

    // Initial event listener for existing remove buttons
    document.querySelectorAll('.removeAttachmentButton').forEach(function (button) {
        button.addEventListener('click', function () {
            this.closest('.attachment-group').remove();
        });
    });

        function confirmDelete() {
            return confirm("Are you sure you want to delete this attachment?");
        }

        function getLocation(fieldId) {
                if (!navigator.geolocation) {
                    alert("Geolocation is not supported by your browser.");
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    position => {
                        const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                        document.getElementById(fieldId).value = coords;
                    },
                    error => {
                        alert("Unable to retrieve your location.");
                        console.error("Geolocation error:", error);
                    }
                );
            }

</script>
}