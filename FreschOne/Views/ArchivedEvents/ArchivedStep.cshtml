@model dynamic
@using FreschOne.Models

@{
    ViewData["Title"] = "Archived Step History";
    int userId = ViewBag.userid;
    int? processInstanceId = ViewBag.processInstanceId;
    int stepId = ViewBag.stepId;
    int Eventid = ViewBag.Eventid;

    string ReworkComment = ViewBag.ReworkComment;
    string ReworkBy = ViewBag.ReworkBy;
}

<partial name="_Sidebar" />

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Step @ViewBag.StepNo - @ViewBag.StepDescription</h2>
    <a class="btn btn-outline-secondary" href="@Url.Action("ArchivedItems", "ArchivedItems", new { userId = userId })">← Back to Archived Items</a>
</div>

<!-- ✅ Collapsible History Container -->
<div class="collapse show" id="historySection">
    <div class="accordion" id="historyAccordion">
        @{
            var history = ViewBag.ProcessHistory as List<ProcessEventAuditViewModel> ?? new();
            var grouped = history.GroupBy(h => new
            {
                h.ProcessEventID,
                h.StepNo,
                StepDescription = h.Data.GetValueOrDefault("StepDescription")?.ToString(),
                TableDescription = h.Data.GetValueOrDefault("TableDescription")?.ToString(),
                IsApproval = h.Data.TryGetValue("StepType", out var t) && t?.ToString() == "Approval"
            })
            .OrderBy(g => g.Key.StepNo);

            int i = 0;
        }

        @foreach (var stepGroup in grouped)
        {
            var headingId = $"historyHeading_{i}";
            var collapseId = $"historyCollapse_{i}";
            var icon = stepGroup.Key.IsApproval ? "🟡" : "🟢";

            <div class="accordion-item">
                <h2 class="accordion-header" id="@headingId">
                    <button class="accordion-button collapsed d-flex justify-content-between align-items-center"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#@collapseId"
                            aria-expanded="false"
                            aria-controls="@collapseId">
                        <div>
                            @icon Step @stepGroup.Key.StepNo – @stepGroup.Key.StepDescription
                        </div>
                    </button>
                </h2>
                <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId">
                    <div class="accordion-body">
                        @foreach (var eventGroup in stepGroup.GroupBy(e => new { e.ProcessEventID, e.CreatedDate, e.FullName }))
                        {
                            <div class="border rounded p-2 mb-3 @(stepGroup.Key.IsApproval ? "bg-warning-subtle border-warning" : "bg-info-subtle border-info")">
                                <div class="fw-bold mb-2 text-muted">
                                    Captured on @eventGroup.Key.CreatedDate.ToString("yyyy-MM-dd HH:mm") by @eventGroup.Key.FullName
                                </div>

                                @foreach (var entry in eventGroup)
                                {
                                    <div class="mt-3">
                                        <strong>@stepGroup.Key.TableDescription</strong>

                                        <ul class="mt-1">
                                            @foreach (var field in entry.Data
                                           .Where(kvp => kvp.Key != "StepDescription"
                                           && kvp.Key != "TableDescription"
                                           && kvp.Key != "interactionType"
                                           && kvp.Key != "CreatedUserID"
                                           && kvp.Key != "CreatedDate"
                                           && kvp.Key != "StepType"
                                           && kvp.Key != "RecordID"))
                                            {
                                                var key = field.Key;
                                                var value = field.Value?.ToString();

                                                string prettyLabel = key
                                                .Replace("ID", "", StringComparison.OrdinalIgnoreCase)
                                                .Replace("attachment_", "")
                                                .Replace("_", " ");
                                                prettyLabel = System.Text.RegularExpressions.Regex.Replace(prettyLabel, "(?<=.)([A-Z])", " $1").Trim();

                                                <li><strong>@prettyLabel:</strong> @Html.Raw(value)</li>
                                            }
                                        </ul>

                                        <div class="small text-muted mt-2">
                                            Record: @entry.Data.GetValueOrDefault("RecordID")<br />
                                            Detail ID: @entry.DetailID
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            i++;
        }
    </div>
</div>
