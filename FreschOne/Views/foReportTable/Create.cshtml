@model FreschOne.Models.foReportTable

@{
    ViewData["Title"] = "Create Table Entry";
    var userid = ViewBag.userid;
    var reportid = ViewBag.ReportID;
    var hasParentStep = ViewBag.HasParentStep == true;
    var isFirstStep = ViewBag.IsFirstStep == true;

    var tablePrefixes = ViewBag.TablePrefixes as List<(string Prefix, string Description)>;
    var tableOptions = ViewBag.ValidTables as List<SelectListItem>;
}

<partial name="_Sidebar" />

<h2>Create Table Entry</h2>

<form asp-action="Create" asp-route-userid="@userid" method="post">
    <input type="hidden" asp-for="ReportsID" />

    <div class="mb-3">
        <label class="form-label d-block">Filter by Prefix</label>

        <div class="form-check form-check-inline">
            <input class="form-check-input prefix-filter" type="radio" name="prefixFilter" id="prefix_all" value="ALL" checked />
            <label class="form-check-label" for="prefix_all">All</label>
        </div>

        @foreach (var prefix in tablePrefixes)
        {
            var id = $"prefix_{prefix.Prefix}";
            <div class="form-check form-check-inline">
                <input class="form-check-input prefix-filter" type="radio" name="prefixFilter" id="@id" value="@prefix.Prefix" />
                <label class="form-check-label" for="@id">@prefix.Description</label>
            </div>
        }
    </div>


    <div class="mb-3">
        <label asp-for="TableName" class="form-label">Table Name</label>
        <select asp-for="TableName" class="form-select" id="TableNameDropdown">
            <option value=""></option>
            @foreach (var item in tableOptions)
            {
                var prefix = item.Group?.Name ?? "";
                <option value="@item.Value" data-prefix="@prefix">@item.Text</option>
            }
        </select>

        <span asp-validation-for="TableName" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ColumnQuery" class="form-label">Column Query</label>
        <input asp-for="ColumnQuery" class="form-control" />
        <span asp-validation-for="ColumnQuery" class="text-danger"></span>
    </div>
    <div id="testQuerySection" style="display: none;">
        <button type="button" class="btn btn-outline-info mb-2" onclick="testQuery()">Test Query</button>
        <div id="queryResult" class="mt-2"></div>
    </div>

    <div class="mb-3">
        <label asp-for="FormType" class="form-label">Form Type</label>
        <select asp-for="FormType" asp-items="ViewBag.FormTypes" class="form-select"></select>
        <span asp-validation-for="FormType" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ColumnCount" class="form-label">Column Count</label>
        <input asp-for="ColumnCount" type="number" class="form-control" />
        <span asp-validation-for="ColumnCount" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Parent" class="form-label">Is Parent Table?</label>
        @{
            var parentSelectAttributes = new Dictionary<string, object>
        {
        { "class", "form-select" },
        { "onchange", "toggleFKDropdown()" },
        { "disabled", "disabled" } // Always disabled
        };
            var parentOptions = new List<SelectListItem>
        {
        new SelectListItem { Text = "No", Value = "false", Selected = !isFirstStep },
        new SelectListItem { Text = "Yes", Value = "true", Selected = isFirstStep }
        };
        }
        @Html.DropDownListFor(m => m.Parent, parentOptions, parentSelectAttributes)

        @if (isFirstStep)
        {
            <input type="hidden" name="Parent" value="true" />
        }
        else
        {
            <input type="hidden" name="Parent" value="false" />
        }

        <span asp-validation-for="Parent" class="text-danger"></span>
    </div>

    <div class="mb-3" id="fkColumnGroup">
        <label asp-for="FKColumn" class="form-label">Foreign Key Column</label>
        <select asp-for="FKColumn" class="form-select" id="FKColumnSelect">
            <option value="">-- Select FK Column --</option>
        </select>
        <span asp-validation-for="FKColumn" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="TableDescription" class="form-label">Description</label>
        <input asp-for="TableDescription" class="form-control" />
        <span asp-validation-for="TableDescription" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <a href="@Url.Action("Index", new { reportid = reportid, userid = userid })" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function toggleFKDropdown() {
            const parent = document.querySelector('[name="Parent"]').value;
            const fkGroup = document.getElementById('fkColumnGroup');
            const fkSelect = document.getElementById('FKColumnSelect');
            fkGroup.style.display = (parent === "true") ? "none" : "block";
            if (parent === "true") {
                fkSelect.value = "";
            }
        }

        function loadFKColumns(tableName, selectedColumn = null) {
            const fkSelect = document.getElementById("FKColumnSelect");
            if (!tableName) return;
            fetch(`/foReportTable/GetFKColumns?tableName=${encodeURIComponent(tableName)}`)
                .then(res => res.json())
                .then(data => {
                    fkSelect.innerHTML = '<option value="">-- Select Column --</option>';
                    data.forEach(col => {
                        const opt = document.createElement("option");
                        opt.value = col;
                        opt.text = col;
                        if (selectedColumn && col === selectedColumn) {
                            opt.selected = true;
                        }
                        fkSelect.appendChild(opt);
                    });
                });
        }

       

        function checkTestQueryVisibility() {
            const tableName = document.getElementById("TableNameDropdown").value.trim();
            const columnQuery = document.querySelector('[name="ColumnQuery"]').value.trim();
            const section = document.getElementById("testQuerySection");

            if (tableName && columnQuery) {
                section.style.display = "block";
            } else {
                section.style.display = "none";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const tableDropdown = document.getElementById("TableNameDropdown");
            const columnInput = document.querySelector('[name="ColumnQuery"]');
            const currentValue = "@Model.FKColumn";

            tableDropdown.addEventListener("change", () => {
                loadFKColumns(tableDropdown.value);
                checkTestQueryVisibility();
            });

            columnInput.addEventListener("input", checkTestQueryVisibility);

            if (tableDropdown.value) {
                loadFKColumns(tableDropdown.value, currentValue);
            }

            checkTestQueryVisibility();
        });


            document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll(".prefix-filter").forEach(radio => {
                radio.addEventListener("change", function () {
                    const selectedPrefix = this.value;
                    const dropdown = document.getElementById("TableNameDropdown");
                    const options = dropdown.querySelectorAll("option");

                    options.forEach(option => {
                        if (!option.value) return; // Skip empty option
                        const optionPrefix = option.getAttribute("data-prefix");

                        // Show all or only matching prefix
                        option.hidden = (selectedPrefix !== "ALL" && optionPrefix !== selectedPrefix);
                    });

                    // Reset selection
                    dropdown.value = "";
                });
            });
        });

         function testQuery() {
            const tableName = document.getElementById("TableNameDropdown").value;
            const columnQuery = document.querySelector('[name="ColumnQuery"]').value;

            fetch('/foReportTable/TestQuery', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ tableName, columnQuery })
            })
                .then(res => res.json())
                .then(data => {
                    const resultDiv = document.getElementById("queryResult");
                    if (data.success) {
                        resultDiv.innerHTML = "<span class='text-success'>✅ Query is valid!</span>";
                    } else {
                        resultDiv.innerHTML = `<span class='text-danger'>❌ ${data.message}</span>`;
                    }
                })
                .catch(err => {
                    document.getElementById("queryResult").innerHTML =
                        `<span class='text-danger'>❌ Error: ${err.message}</span>`;
                });
        }


    </script>
}
