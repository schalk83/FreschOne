<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FreschOne</title>

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />

    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.4.2/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />


    <!-- Custom Styles -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/FreschOne.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/sidebar.css" asp-append-version="true" />

    @RenderSection("Styles", required: false)
</head>
<body class="@ViewData["BodyClass"]">
    <div class="container-fluid px-3 px-md-4">
        <div class="content-wrapper w-10">
            @RenderBody()
        </div>
    </div>

    <!-- Libraries -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <!-- Custom Scripts -->
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await Html.PartialAsync("_BrowseModal")
    @RenderSection("Scripts", required: false)

    <script>
        /* ────────────────────────────────────────────────────────────────────────────
           Search-picker modal
           ────────────────────────────────────────────────────────────────────────── */
        (() => {
            /* helper – turn raw column name into a nice label/title */

        const makeFriendly = (txt = "") => {
            if (!txt) return "";

            // Only override exact "foUserID"
            if (txt.toLowerCase() === "fouserid") return "User";

            let label = txt
                .replace(/^foUserID_/i, "")        // remove prefix
                .replace(/ID$/i, "")               // remove suffix
                .replace(/_/g, " ")                // snake_case to spaces
                .replace(/([a-z])([A-Z])/g, "$1 $2") // camelCase to spaces
                .trim();

            // Capitalize each word
            return label.replace(/\b\w/g, c => c.toUpperCase()) || txt;
        };

            const modalEl = document.getElementById("searchModal");
            const modal   = new bootstrap.Modal(modalEl);

            /* global so we can call it from Razor-generated buttons */
        window.openSearchModal = function (tableName, columnName, targetField) {
            // Fallback to targetField if columnName is just "ID"
            let fieldLabel = columnName;

            if (columnName.toLowerCase() === "id" && targetField.includes("_")) {
                const parts = targetField.split("_");
                fieldLabel = parts[parts.length - 1]; // e.g., "Agent"
            }

            const niceColumnName = makeFriendly(fieldLabel);

                /* skeleton while we fetch data */
                document.getElementById("searchModalContent").innerHTML = `
                    <div class="modal-header bg-primary bg-opacity-10 border-bottom-0">
                        <h5 class="modal-title fw-semibold text-primary">Select ${niceColumnName}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading…</span>
                        </div>
                    </div>`;
                modal.show();

                fetch(
                    `/TableX/GetSearchOptions?tableName=${encodeURIComponent(tableName)}&columnName=${encodeURIComponent(columnName)}`
                )
                    .then(r => r.json())
                    .then(data => {
                        const cols = data.columns || [];
                        const rows = data.rows    || [];

                        /* build table */
                        let html = `
                            <div class="modal-header bg-primary bg-opacity-10 border-bottom-0">
                                <h5 class="modal-title fw-semibold text-primary">Select ${niceColumnName}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body p-0">
                              <div class="table-responsive">
                                <table class="table table-striped table-hover table-bordered mb-0 small">
                                  <thead class="table-light">
                                    <tr>`;

                        cols.forEach(c => html += `<th class="align-middle">${makeFriendly(c)}</th>`);
                        html += `</tr></thead><tbody>`;

                        if (rows.length) {
                            rows.forEach(r => {
                                const id   = (r.ID ?? "").toString().replace(/'/g, "\\'");
                                const disp = (r.Display ?? "").replace(/'/g, "\\'");
                                html += `<tr style="cursor:pointer"
                                             onclick="selectSearchValue('${targetField}', '${id}', '${disp}')">`;
                                cols.forEach(c => html += `<td>${r[c] ?? ""}</td>`);
                                html += `</tr>`;
                            });
                        } else {
                            html += `<tr><td colspan="${cols.length}" class="text-center text-muted py-3">
                                       No results found.
                                     </td></tr>`;
                        }

                        html += `</tbody></table></div></div>`;

                        document.getElementById("searchModalContent").innerHTML = html;
                    })
                    .catch(err => {
                        console.error("Modal fetch failed:", err);
                        document.getElementById("searchModalContent").innerHTML = `
                            <div class="modal-header bg-danger bg-opacity-10">
                                <h5 class="modal-title text-danger">Error</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p class="text-danger mb-0">Could not load results: ${err.message}</p>
                            </div>`;
                    });
            };

            /* called when a <tr> is clicked */
            window.selectSearchValue = function (fieldId, value, displayText) {

                /* hidden value(s) */
                const hiddenById   = document.getElementById(fieldId);
                const hiddenByName = document.querySelector(`input[type="hidden"][name="${fieldId}"]`);
                if (hiddenById)   hiddenById.value   = value;
                if (hiddenByName) hiddenByName.value = value;

                /* visible text box */
                const displayById      = document.getElementById(fieldId);
                const displayByDisplay = document.getElementById(fieldId + "_Display");
                if (displayByDisplay) {
                    displayByDisplay.value = displayText;
                } else if (displayById && displayById.type !== "hidden") {
                    displayById.value = displayText;
                }

                modal.hide();
            };
        })();
    </script>


</body>
</html>
