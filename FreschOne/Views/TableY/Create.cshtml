@model FreschOne.Models.TableCreateViewModel

@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID;
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;
}

<partial name="_Sidebar" />
<h1>Create New @tableDescription</h1>
@if (ViewBag.DataManagementBreadcrumbY != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })" class="btn btn-secondary">Back</a>
}

<form method="post" action="@Url.Action("Create", new { userid = userid, PKID = PKID, PKColumn = PKColumn, tablename = Model.TableName })" enctype="multipart/form-data" id="createRecordForm">
    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;  // Skip the ID column, it should be auto-generated

        var columnValue = Model.Record.ContainsKey(column) ? Model.Record[column] : null;
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string"; // Default to string if not found
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255; // Default length if not found
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label

        <div class="form-group">
            @if (@column == PKColumn)
            {
                <label style="display: none;" for="@column">@column</label>
            }
            else
            {
                @if (column.StartsWith("attachment_"))
                {
                    <br />
                    string columnLabel = formattedColumn.Replace("attachment_", "").Replace("_", " "); // Remove "attachment_" and replace "_" with spaces
                    <label>@columnLabel</label>
                }
                @if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
                {
                    <label for="@column">@column.Replace("ID", "")</label>
                }
                else
                {
                    <label for="@formattedColumn">@formattedColumn</label>
                }
            }

            @if (column.StartsWith("attachment_"))
            {
                string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                <div class="row">
                    <div class="col-md-6">
                        <label>Description</label>
                        <input type="text" id="desc_@column" value="@attachmentDescription" class="form-control" />
                    </div>

                    <div class="col-md-6">
                        <label>Upload @formattedColumn.Replace("attachment_", "").Replace("_", " ")</label>
                        <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />
                    </div>
                </div>

                <!-- ✅ This hidden input ensures only ONE field (attachment_StudentPass) is sent -->
                <input type="hidden" name="@column" id="hidden_@column" value="@attachmentDescription;@attachmentFilePath" />

                @if (!string.IsNullOrEmpty(attachmentFilePath))
                {
                    string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                    ? Url.Content("~/" + attachmentFilePath)
                    : Url.Content("~/Attachments/" + attachmentFilePath);

                    <p>Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a></p>
                }
            }
            @if (columnType == "varchar" && columnLength <= 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <input type="text" name="@column" style="display: none;" value="@columnValue" class="form-control" />

                }
                else
                {
                    <input type="text" name="@column" value="@columnValue" class="form-control" />
                }
            }
            else if (columnType == "varchar" && columnLength > 255)
            {
                @if (column.StartsWith("attachment_"))
                {
                    <textarea name="@column" class="form-control" style="display: none;">@columnValue</textarea>

                }
                else
                {
                    <textarea name="@column" class="form-control">@columnValue</textarea>
                }
            }
            else if (Model.ForeignKeys.Any(fk => fk.ColumnName == column))
            {
                var foreignKey = Model.ForeignKeys.First(fk => fk.ColumnName == column);

                @Html.DropDownList(
                         foreignKey.ColumnName,
                         new SelectList(
                         Model.ForeignKeyOptions[foreignKey.ColumnName],
                         "Value", "Text", columnValue),
                         "Select...",
                         new { @class = "form-control" })
            }
            else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
            {
                if (@column == PKColumn)
                {
                    <input style="display: none;" name="@column" value="@PKID" class="form-control" />
                }
                else
                {
                    <input type="number" name="@column" value="@columnValue" class="form-control" />

                }
                <!-- Render number input for int or decimal columns -->
            }
            else if (columnType == "bit")
            {
                <!-- Render checkbox for bit columns, handle DBNull -->
                <input type="checkbox" name="@column" value="true" class="form-check-input" />

            }
            else if (columnType == "datetime")
            {
                <!-- Render date picker for datetime columns -->
                string formattedDate = columnValue != null ? DateTime.TryParse(columnValue.ToString(), out var dateValue)
                ? dateValue.ToString("yyyy-MM-dd") : "" : ""; // If the value is null, set it to an empty string
                <input type="date" name="@column" value="@formattedDate" class="form-control" />
            }

        </div>
    }

    <hr />
    <!-- Attachments Section -->
    <h4>
        Add Attachments
        <button type="button" id="toggleAttachmentForm" class="btn btn-link" style="font-size: 1.2em;">
            <i class="fas fa-chevron-down" id="toggleIcon"></i>
        </button>
    </h4>
    <div id="attachmentForm" style="display: none;">
        <div id="attachmentContainer"></div>
        <button type="button" id="addAttachmentButton" class="btn btn-success" style="font-size: 1.5em; padding: 10px 20px; margin-top: 10px;">
            <i class="fas fa-plus"></i>
        </button>
    </div>
    <br />
    @if (ViewBag.DataManagementBreadcrumbY != null)
    {
        <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbY.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbY.Parameters["userid"],
        PKID = ViewBag.DataManagementBreadcrumbY.Parameters["PKID"],
        PKColumn = ViewBag.DataManagementBreadcrumbY.Parameters["PKColumn"],
        pageNumber = ViewBag.DataManagementBreadcrumbY.Parameters["pageNumber"]
    })" class="btn btn-secondary">Back</a>
    }

    <div class="form-group text-center">
        <button type="submit" class="btn btn-primary">Create Record</button>
    </div>
</form>

<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script>
    document.getElementById('toggleAttachmentForm').addEventListener('click', function () {
        var form = document.getElementById('attachmentForm');
        var icon = document.getElementById('toggleIcon');
        var attachmentFields = document.querySelectorAll('.attachment-field');

        if (form.style.display === 'none') {
            form.style.display = 'block';
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-up');
            attachmentFields.forEach(field => field.setAttribute('required', 'required'));
        } else {
            form.style.display = 'none';
            icon.classList.remove('fa-chevron-up');
            icon.classList.add('fa-chevron-down');
            attachmentFields.forEach(field => field.removeAttribute('required'));
        }
    });

     // Function to update hidden input field with attachment data
        function updateAttachmentField(columnName) {
            let descInput = document.getElementById("desc_" + columnName);
            let fileInput = document.getElementById("file_" + columnName);
            let hiddenInput = document.getElementById("hidden_" + columnName);

            let newDescription = descInput.value.trim();
            let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

            // ✅ Get the existing file path from hidden input
            let existingValue = hiddenInput.value.split(";");
            let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

            // ✅ If no new file is selected, keep only the previous **file path**
            if (filePath === "") {
                filePath = existingFilePath;
            }

            // ✅ Ensure we replace the previous value completely, without appending
            hiddenInput.value = `${newDescription};${filePath}`;
            console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
        }

        // Ensure the description change updates the hidden field
        document.querySelectorAll("[id^=desc_]").forEach(descField => {
            descField.addEventListener("input", function () {
                let columnName = this.id.replace("desc_", "");
                updateAttachmentField(columnName);
            });
        });

    document.getElementById('addAttachmentButton').addEventListener('click', function () {
        var container = document.getElementById('attachmentContainer');
        var attachmentGroup = document.createElement('div');
        attachmentGroup.classList.add('attachment-group', 'd-flex', 'align-items-center', 'mt-2');

        attachmentGroup.innerHTML = `
            <div style="flex-grow: 1;">
                <div class="form-group">
                    <label for="AttachmentDescription">Attachment Description</label>
                    <input type="text" name="AttachmentDescriptions" class="form-control attachment-field" required />
                </div>
                <div class="form-group">
                    <label for="Attachment">Upload Attachment</label>
                    <input type="file" name="Attachments" class="form-control attachment-field" required />
                </div>
            </div>
            <div class="trash-container" style="display: flex; align-items: center; padding-left: 10px;">
                <button type="button" class="btn btn-link text-danger removeAttachmentButton" style="font-size: 1.5em;" title="Remove Attachment">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>
        `;

        container.appendChild(attachmentGroup);
    });

    document.addEventListener('click', function (event) {
        if (event.target.closest('.removeAttachmentButton')) {
            event.target.closest('.attachment-group').remove();
        }
    });

    document.getElementById('createRecordForm').addEventListener('submit', function (event) {
        var attachmentForm = document.getElementById('attachmentForm');
        var attachmentFields = document.querySelectorAll('.attachment-field');

        if (attachmentForm.style.display !== 'none') {
            let allFieldsFilled = true;
            attachmentFields.forEach(function (field) {
                if (!field.value.trim()) {
                    allFieldsFilled = false;
                }
            });

            if (!allFieldsFilled) {
                alert('Please fill in all required attachment details before submitting.');
                event.preventDefault();
                return;
            }
        }
    });
</script>
