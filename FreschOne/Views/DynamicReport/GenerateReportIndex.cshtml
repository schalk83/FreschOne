@using FreschOne.Helpers
@using System.Data
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = ViewBag.ReportName;
    var userID = ViewBag.UserID;
    var reportName = ViewBag.ReportName;
    var tableDescriptions = ViewBag.TableDescriptions as Dictionary<string, string>;
}

<partial name="_Sidebar" />

<h2>@reportName</h2>
<div class="d-flex justify-content-end mb-2">
    <button class="btn btn-outline-primary btn-sm me-2" onclick="expandAll()">Expand All</button>
    <button class="btn btn-outline-secondary btn-sm" onclick="collapseAll()">Collapse All</button>
</div>

@if (ViewBag.SearchResult != null)
{
    var tables = ViewBag.ReportTables as List<object>;
    var reportData = ViewBag.ReportData as Dictionary<string, Queue<DataTable>>;
    var tablesWithQR = ViewBag.TablesWithQR as HashSet<string>;

    <div class="accordion" id="reportAccordion">
        @for (int i = 0; i < tables.Count; i++)
        {
            string key = "", tableDescription = "", formType = "";
            int? columnCount = null;

            if (tables[i] is FreschOne.Models.foReportTable t)
            {
                key = t.TableName;
                formType = t.FormType;
                columnCount = t.ColumnCount;
                tableDescription = t.TableDescription;
            }
            else if (tables[i] is FreschOne.Models.foReportTableQuery q)
            {
                key = "Q_" + q.ID;
                formType = q.FormType;
                columnCount = q.ColumnCount;
                tableDescription = q.TableDescription;
            }

            bool hasQR = tablesWithQR?.Contains(key) == true;
            var headingId = $"heading_{i}";
            var collapseId = $"collapse_{i}";

            <div class="accordion-item">
                <h2 class="accordion-header" id="@headingId">
                    <button class="accordion-button collapsed fw-bold fs-5" type="button" data-bs-toggle="collapse"
                            data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                        @tableDescription
                    </button>
                </h2>
                <div id="@collapseId" class="accordion-collapse collapse show" data-bs-parent="#reportAccordion">
                    <div class="accordion-body">
                        @if (reportData.ContainsKey(key) && reportData[key].Count > 0)
                        {
                            var dataset = reportData[key].Dequeue();

                            if (dataset.Rows.Count > 0)
                            {
                                if (formType == "T")
                                {
                                    <table class="table table-bordered table-striped">
                                        <thead>
                                            <tr>
                                                @foreach (DataColumn col in dataset.Columns)
                                                {
                                                    if (!col.ColumnName.EndsWith("_Display") && col.ColumnName != "QR")
                                                    {
                                                        string colName = col.ColumnName;

                                                        if (colName.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                                                            colName = colName.Substring("foUserID_".Length);
                                                        else if (colName.StartsWith("attachment_", StringComparison.OrdinalIgnoreCase))
                                                            colName = colName.Substring("attachment_".Length);
                                                        else if (colName.StartsWith("geo_", StringComparison.OrdinalIgnoreCase))
                                                            colName = colName.Substring("geo_".Length);

                                                        string label = Regex.Replace(colName.Replace("ID", "").Replace("_", " "), "(?<=.)([A-Z])", " $1").Trim();

                                                        <th>@label</th>
                                                    }
                                                }
                                                @if (hasQR)
                                                {
                                                    <th>QR</th>
                                                }
                                            </tr>
                                        </thead>

                                        <tbody>
                                            @foreach (DataRow row in dataset.Rows)
                                            {
                                                <tr>
                                                    @foreach (DataColumn col in dataset.Columns)
                                                    {
                                                        if (!col.ColumnName.EndsWith("_Display") && col.ColumnName != "QR")
                                                        {
                                                            string val = row[col.ColumnName]?.ToString() ?? "";
                                                            string displayCol = col.ColumnName + "_Display";
                                                            string displayVal = dataset.Columns.Contains(displayCol)
                                                            ? row[displayCol]?.ToString()
                                                            : val;

                                                            if (col.ColumnName.StartsWith("attachment_") && val.Contains(";"))
                                                            {
                                                                var parts = val.Split(';');
                                                                var desc = parts[0];
                                                                var url = parts.Length > 1 ? parts[1].Replace("\\", "/") : "";
                                                                <td>@Html.Raw(string.IsNullOrWhiteSpace(url) ? desc : $"<a href='/{url}' target='_blank'>{desc}</a>")</td>
                                                            }
                                                            else
                                                            {
                                                                <td>@Html.Raw(displayVal)</td>
                                                            }
                                                        }
                                                    }

                                                    @if (hasQR)
                                                    {
                                                        string qrData = string.Join("\n", dataset.Columns.Cast<DataColumn>()
                                                        .Where(c => !c.ColumnName.EndsWith("_Display") && c.ColumnName != "QR")
                                                        .Select(c => $"{c.ColumnName}: {row[c]}"));
                                                        var qrImage = QRCodeUtils.GenerateQrCode(qrData);
                                                        <td>@(string.IsNullOrWhiteSpace(qrImage) ? "" : $"<img src='{qrImage}' width='100' height='100' />")</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else if (formType == "F")
                                {
                                    @foreach (DataRow row in dataset.Rows)
                                    {
                                        var columns = dataset.Columns.Cast<DataColumn>()
                                        .Where(c => !c.ColumnName.EndsWith("_Display") && c.ColumnName != "ID" && c.ColumnName != "QR")
                                        .ToList();

                                        int cols = columnCount ?? 2;
                                        int rowCount = (int)Math.Ceiling((double)columns.Count / cols);

                                        <table class="table table-bordered w-100">
                                            <tbody>
                                                @for (int r = 0; r < rowCount; r++)
                                                {
                                                    <tr class="align-top">
                                                        @for (int c = 0; c < cols; c++)
                                                        {
                                                            int index = r * cols + c;
                                                            if (index < columns.Count)
                                                            {
                                                                var col = columns[index];
                                                                string label = col.ColumnName.Replace("ID", "");
                                                                label = Regex.Replace(label, "(?<=.)([A-Z])", " $1").Trim();
                                                                if (col.ColumnName.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                                                                    label = col.ColumnName.Substring("foUserID_".Length); // clean label from actual column name

                                                                label = Regex.Replace(label.Replace("ID", "").Replace("_", " "), "(?<=.)([A-Z])", " $1").Trim();


                                                                label = label.Replace("_", " ");

                                                                string val = row[col.ColumnName]?.ToString() ?? "";
                                                                string displayCol = col.ColumnName + "_Display";
                                                                string displayVal = dataset.Columns.Contains(displayCol)
                                                                ? row[displayCol]?.ToString()
                                                                : val;

                                                                <td class="fw-bold py-2 w-25">@label:</td>
                                                                <td class="py-2 w-25">
                                                                    @if (col.ColumnName.StartsWith("attachment_") && val.Contains(";"))
                                                                    {
                                                                        var parts = val.Split(';');
                                                                        var desc = parts[0];
                                                                        var url = parts.Length > 1 ? parts[1].Replace("\\", "/") : "";
                                                                        @Html.Raw(string.IsNullOrWhiteSpace(url) ? desc : $"<a href='/{url}' target='_blank'>{desc}</a>")
                                                                    }
                                                                    else
                                                                    {
                                                                        @Html.Raw(displayVal)
                                                                    }
                                                                </td>
                                                            }
                                                            else
                                                            {
                                                                <td class="w-25"></td>
                                                                <td class="w-25"></td>
                                                            }
                                                        }
                                                    </tr>
                                                }

                                                @if (hasQR)
                                                {
                                                    string qrData = string.Join("\n", columns.Select(c => $"{c.ColumnName}: {row[c]}"));
                                                    var qrImage = QRCodeUtils.GenerateQrCode(qrData);
                                                    if (!string.IsNullOrWhiteSpace(qrImage))
                                                    {
                                                        <tr>
                                                            <td colspan="@(cols * 2)">
                                                                <strong>QR Code:</strong><br />
                                                                <img src="@qrImage" width="150" height="150" />
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                    }
                                }
                            }
                            else
                            {
                                <p>No data found.</p>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        function expandAll() {
            document.querySelectorAll('.accordion-collapse').forEach(el => el.classList.add('show'));
            document.querySelectorAll('.accordion-button').forEach(btn => btn.classList.remove('collapsed'));
        }

        function collapseAll() {
            document.querySelectorAll('.accordion-collapse').forEach(el => el.classList.remove('show'));
            document.querySelectorAll('.accordion-button').forEach(btn => btn.classList.add('collapsed'));
        }


    function sortTable(th) {
        const table = th.closest("table");
        const tbody = table.querySelector("tbody");
        const index = Array.from(th.parentNode.children).indexOf(th);
        const ascending = !th.classList.contains("sorted-asc");

        Array.from(table.querySelectorAll("th")).forEach(th => th.classList.remove("sorted-asc", "sorted-desc"));
        th.classList.add(ascending ? "sorted-asc" : "sorted-desc");

        const rows = Array.from(tbody.querySelectorAll("tr"));

        rows.sort((rowA, rowB) => {
            const cellA = rowA.children[index].textContent.trim().toLowerCase();
            const cellB = rowB.children[index].textContent.trim().toLowerCase();
            return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
        });

        rows.forEach(row => tbody.appendChild(row));
    }
</script>
}