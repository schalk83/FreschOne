@model FreschOne.Models.TableCreateViewModel

@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var columnTypes = ViewBag.ColumnTypes;
    var columnLengths = ViewBag.ColumnLengths;
    var PKID = ViewBag.PKID; // Ensure PKID is set after submission
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;
    var relatedTables = (List<Dictionary<string, object>>)ViewBag.RelatedTables;
    var tablenameX = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"];

}


<partial name="_Sidebar" />

@if (ViewBag.DataManagementBreadcrumbX != null)
{
    <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back</a>
}
<h1>Create New @tableDescription</h1>


<!-- Main Form for Creating Record and Attachments -->
<form method="post" action="@Url.Action("Create", new { userid = userid, PKColumn = PKColumn, tablename = Model.TableName })" enctype="multipart/form-data" id="createRecordForm">
    @foreach (var column in Model.Columns)
    {
        if (column == "ID") continue;

        var columnValue = Model.Record.ContainsKey(column) ? Model.Record[column] : null;
        var columnType = columnTypes.ContainsKey(column) ? columnTypes[column] : "string";
        var columnLength = columnLengths.ContainsKey(column) ? columnLengths[column] : 255;
        string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column, "(?<=.)([A-Z])", " $1"); // Create formatted column label


        <div class="form-group">
            @{
                string label = column;

                if (column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                {
                    label = column.Replace("foUserID_", "");
                }
                else if (column.StartsWith("attachment_"))
                {
                    label = column.Replace("attachment_", "");
                }
                else if (column.StartsWith("geo_"))
                {
                    label = column.Replace("geo_", "");
                }
                else if (column.EndsWith("ID", StringComparison.OrdinalIgnoreCase))
                {
                    label = column[..^2];
                }

                label = System.Text.RegularExpressions.Regex.Replace(label.Replace("_", " "), "(?<=.)([A-Z])", " $1").Trim();
            }

            <label class="fw-bold" for="@column">@label</label>

            @if (column.StartsWith("attachment_"))
            {
                string[] attachmentParts = columnValue?.ToString().Split(';') ?? new string[2];
                string attachmentDescription = attachmentParts.Length > 0 ? attachmentParts[0] : "";
                string attachmentFilePath = attachmentParts.Length > 1 ? attachmentParts[1] : "";

                <div class="row mb-2">
                    <div class="col-md-6">
                        <input type="text" id="desc_@column" value="@attachmentDescription" placeholder="Attachment Description" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <input type="file" name="file_@column" id="file_@column" class="form-control" onchange="updateAttachmentField('@column')" />
                    </div>
                </div>

                <input type="hidden" name="@column" id="hidden_@column" value="@attachmentDescription;@attachmentFilePath" />

                @if (!string.IsNullOrEmpty(attachmentFilePath))
                {
                    string fileUrl = attachmentFilePath.StartsWith("Attachments/")
                    ? Url.Content("~/" + attachmentFilePath)
                    : Url.Content("~/Attachments/" + attachmentFilePath);

                    <p class="mt-1 small text-muted">
                        Current File: <a href="@fileUrl" target="_blank">@System.IO.Path.GetFileName(attachmentFilePath)</a>
                    </p>
                }
            }
            else if (column.StartsWith("geo_"))
            {
                <div class="input-group">
                    <input type="text" name="@column" id="@column" value="@columnValue" class="form-control" placeholder="Latitude, Longitude" />
                    <button type="button" class="btn btn-outline-secondary" onclick="getLocation('@column')">📍 My Location</button>
                </div>
            }
            else if ((Model.ForeignKeys.Any(fk => fk.ColumnName == column) || column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase)))
            {
                var isFoUser = column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase);
                var foreignKey = isFoUser
                ? new FreschOne.Models.ForeignKeyInfo { ColumnName = "ID", TableName = "foUsers" }
                : Model.ForeignKeys.First(fk => fk.ColumnName == column);

                var isMaintenance = foreignKey.TableName.StartsWith("tbl_md_", StringComparison.OrdinalIgnoreCase);
                var displayValue = Model.Record.ContainsKey($"{column}_Display") ? Model.Record[$"{column}_Display"]?.ToString() : "";

                if (isMaintenance)
                {
                    var options = Model.ForeignKeyOptions.ContainsKey(foreignKey.ColumnName)
                    ? Model.ForeignKeyOptions[foreignKey.ColumnName]
                    : new List<SelectListItem>();

                    @Html.DropDownList(column,
                             new SelectList(options, "Value", "Text", columnValue),
                             "Select...",
                             new { @class = "form-select" })
                }
                else
                {
                    <div class="input-group">
                        <input type="hidden" name="@column" value="@columnValue" />
                        <input type="text" id="@column" value="@displayValue" class="form-control" readonly placeholder="Search..." onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')" />
                        <button type="button" class="btn btn-outline-secondary" onclick="openSearchModal('@foreignKey.TableName', '@foreignKey.ColumnName', '@column')">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                }
            }
            else if (columnType == "varchar" && columnLength > 255)
            {
                <textarea name="@column" class="form-control">@columnValue</textarea>
            }
            else if (columnType == "varchar")
            {
                <input type="text" name="@column" value="@columnValue" class="form-control" />
            }
            else if (columnType == "int" || columnType == "bigint" || columnType == "decimal")
            {
                <input type="number" name="@column" value="@columnValue" class="form-control" />
            }
            else if (columnType == "bit")
            {
                <input type="checkbox" name="@column" value="true" class="form-check-input" />
            }
            else if (columnType == "datetime")
            {
                string formattedDate = columnValue != null && DateTime.TryParse(columnValue.ToString(), out var dateValue)
                ? dateValue.ToString("yyyy-MM-dd")
                : "";
                <input type="date" name="@column" value="@formattedDate" class="form-control" />
            }
        </div>

    }

    <!-- Attachments Section -->
    <div class="attachment-section p-3 mt-4 rounded border">
        <h6 class="d-flex justify-content-between align-items-center small fw-bold mb-2 toggle-attachments" data-target="attachmentForm" style="cursor: pointer;">
            <span>Add Attachments</span>
            <i class="fas fa-chevron-down toggle-icon" id="toggleIcon"></i>
        </h6>

        <div id="attachmentForm" style="display: none;">
            <div id="attachmentContainer" class="mb-2"></div>

            <button type="button" id="addAttachmentButton" class="custom-button btn-green btn-sm d-flex align-items-center mt-2">
                <i class="bi bi-plus-circle me-1"></i> Add
            </button>
        </div>
    </div>



    @if (ViewBag.DataManagementBreadcrumbX != null)
    {
        <a href="@Url.Action("Index", new {
        tablename = ViewBag.DataManagementBreadcrumbX.Parameters["tablename"],
        userid = ViewBag.DataManagementBreadcrumbX.Parameters["userid"],
        pageNumber = ViewBag.DataManagementBreadcrumbX.Parameters["pageNumber"]
    })  " class="text-decoration-none">← Back</a>
    }

    <div class="form-group text-center">
        <button type="submit" class="custom-button btn-blue">
            <i class="bi bi-check-circle me-1"></i> Create
        </button>
    </div>

</form>

@section Scripts {

<!-- JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script>
        // Updated toggle using data-target (more flexible and reusable)
        document.querySelectorAll('.toggle-attachments').forEach(header => {
            header.addEventListener('click', function () {
                const targetId = this.dataset.target;
                const target = document.getElementById(targetId);
                const icon = this.querySelector('.toggle-icon');

                if (target.style.display === 'none' || target.style.display === '') {
                    target.style.display = 'block';
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');
                } else {
                    target.style.display = 'none';
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                }
            });
        });


     // Function to update hidden input field with attachment data
        function updateAttachmentField(columnName) {
            let descInput = document.getElementById("desc_" + columnName);
            let fileInput = document.getElementById("file_" + columnName);
            let hiddenInput = document.getElementById("hidden_" + columnName);

            let newDescription = descInput.value.trim();
            let filePath = fileInput.files.length > 0 ? fileInput.files[0].name : "";

            // ✅ Get the existing file path from hidden input
            let existingValue = hiddenInput.value.split(";");
            let existingFilePath = existingValue.length > 1 ? existingValue[1].trim() : "";

            // ✅ If no new file is selected, keep only the previous **file path**
            if (filePath === "") {
                filePath = existingFilePath;
            }

            // ✅ Ensure we replace the previous value completely, without appending
            hiddenInput.value = `${newDescription};${filePath}`;
            console.log(`📌 Updated Hidden Input: ${hiddenInput.value}`);
        }

        // Ensure the description change updates the hidden field
        document.querySelectorAll("[id^=desc_]").forEach(descField => {
            descField.addEventListener("input", function () {
                let columnName = this.id.replace("desc_", "");
                updateAttachmentField(columnName);
            });
        });

            document.getElementById('addAttachmentButton').addEventListener('click', function () {
            var container = document.getElementById('attachmentContainer');
            var attachmentGroup = document.createElement('div');
            attachmentGroup.classList.add('d-flex', 'align-items-center', 'gap-2', 'mb-2');

            attachmentGroup.innerHTML = `
            <div class="row w-100">
                <div class="col-md-6">
                    <input type="text" name="AttachmentDescriptions" placeholder="Description" class="form-control attachment-field" required />
                </div>
                <div class="col-md-5">
                    <input type="file" name="Attachments" class="form-control attachment-field" required />
                </div>
                <div class="col-md-1 d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-link text-danger removeAttachmentButton" title="Remove Attachment">
                        <i class="bi bi-trash-fill fs-5"></i>
                    </button>
                </div>
            </div>
        `;


            container.appendChild(attachmentGroup);
        });


    document.addEventListener('click', function (event) {
        if (event.target.closest('.removeAttachmentButton')) {
            event.target.closest('.attachment-group').remove();
        }
    });

    function getLocation(fieldId) {
            if (!navigator.geolocation) {
                alert("Geolocation is not supported by your browser.");
                return;
            }

            navigator.geolocation.getCurrentPosition(
                position => {
                    const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;
                    document.getElementById(fieldId).value = coords;
                },
                error => {
                    alert("Unable to retrieve your location.");
                    console.error("Geolocation error:", error);
                }
            );
        }
</script>
}