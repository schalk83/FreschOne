@model FreschOne.Models.TableViewModel
@{
    var userid = ViewBag.userid;
    var readwriteaccess = ViewBag.readwriteaccess;
    var tablename = ViewBag.tablename;
    var PKID = ViewBag.PKID;
    var PKColumn = ViewBag.PKColumn;
    var tableDescription = ViewBag.tableDescription;
    var returnURL = ViewBag.ReturnURL;
    var breadcrumb = ViewBag.DataManagementBreadcrumbX as DataManagementBreadcrumbX;
}

<partial name="_Sidebar" />

@if (breadcrumb != null)
{
    <a href="@Url.Action("Index", "TableX", new {
        tablename = breadcrumb.Parameters["tablename"],
        userid = breadcrumb.Parameters["userid"],
        pageNumber = breadcrumb.Parameters["pageNumber"]
    })" class="text-decoration-none">← Back to @breadcrumb.Parameters["description"]</a>
}

<h1 class="mb-4">Data for @tableDescription</h1>

<div class="d-flex justify-content-between align-items-center mb-2">
    @if (readwriteaccess == "RW")
    {
        <a href="@Url.Action("Create", new { PKID, PKColumn, userid = Model.UserId, tablename = Model.TableName, returnURL })" class="btn custom-button btn-blue">
            <i class="bi bi-plus-circle-fill"></i> Create
        </a>
    }
    <button id="toggleSearchBtn" class="btn btn-sm btn-outline-primary" onclick="toggleSearch()">+ Show Search</button>
</div>

<table class="table table-bordered table-hover align-middle" id="dataTable">
    <thead class="table-light">
        <tr>
            @foreach (var column in Model.Columns)
            {
                if (column == PKColumn) { continue; }

                string formattedColumn;

                if (column == "ID")
                {
                    formattedColumn = "ID";
                }
                else if (column.StartsWith("attachment_"))
                {
                    var stripped = column.Replace("attachment_", "");
                    formattedColumn = System.Text.RegularExpressions.Regex.Replace(stripped, "(?<=.)([A-Z])", " $1");
                }
                else if (column.StartsWith("geo_"))
                {
                    var stripped = column.Replace("geo_", "");
                    formattedColumn = System.Text.RegularExpressions.Regex.Replace(stripped, "(?<=.)([A-Z])", " $1");
                }
                else if (column.StartsWith("foUserID_", StringComparison.OrdinalIgnoreCase))
                {
                    var stripped = column.Replace("foUserID_", "").Replace("_", " ");
                    formattedColumn = System.Text.RegularExpressions.Regex.Replace(stripped, "(?<=.)([A-Z])", " $1");
                }
                else
                {
                    formattedColumn = System.Text.RegularExpressions.Regex.Replace(column.Replace("ID", ""), "(?<=.)([A-Z])", " $1");
                }

                <th class="fixed-width" data-column="@column">@formattedColumn</th>
            }

            <th>Actions</th>
        </tr>
        <tr id="searchRow" style="display: none;">
            @foreach (var column in Model.Columns)
            {
                if (column == PKColumn) { continue; }
                string formattedColumn = System.Text.RegularExpressions.Regex.Replace(column.Replace("ID", ""), "(?<=.)([A-Z])", " $1");

                if (column.StartsWith("geo_"))
                {
                    var stripped = column.Replace("geo_", "");
                    formattedColumn = System.Text.RegularExpressions.Regex.Replace(stripped, "(?<=.)([A-Z])", " $1");
                }

                <th class="fixed-width">
                    @if (column.StartsWith("attachment_"))
                    {
                        <select class="form-control column-search" data-column="@column">
                            <option value="">All</option>
                            <option value="true">With Attachment</option>
                            <option value="false">No Attachment</option>
                        </select>
                    }
                    else
                    {
                        <input type="text" class="form-control column-search" data-column="@column" placeholder="Search @formattedColumn" />
                    }
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody id="tableBody">
        @foreach (var row in Model.TableData)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    if (column == PKColumn) { continue; }

                    var rawValue = row[column]?.ToString() ?? "";
                    var displayKey = $"{column}_Display";
                    var displayValue = row.ContainsKey(displayKey) ? row[displayKey]?.ToString() : rawValue;

                    <td class="fixed-width" data-column="@column" data-sort="@rawValue">
                        @if (column.StartsWith("attachment_"))
                        {
                            var parts = rawValue.Split(';');
                            var desc = parts.ElementAtOrDefault(0)?.Trim();
                            var url = parts.ElementAtOrDefault(1)?.Trim().Replace("\\", "/");

                            if (!string.IsNullOrWhiteSpace(url))
                            {
                                <a href="@Url.Content("~/" + url)" target="_blank">@desc</a>
                            }
                            else
                            {
                                @desc
                            }
                        }
                        else
                        {
                            @Html.Raw(displayValue)
                        }
                    </td>
                }

                <td class="text-center align-middle actions-column">
                    <div class="d-flex flex-row justify-content-center align-items-center gap-2">
                        @if (readwriteaccess == "RW")
                        {
                            <form method="get" asp-action="Edit" class="m-0 p-0">
                                <input type="hidden" name="id" value="@row["ID"]" />
                                <input type="hidden" name="PKID" value="@PKID" />
                                <input type="hidden" name="PKColumn" value="@PKColumn" />
                                <input type="hidden" name="tablename" value="@tablename" />
                                <input type="hidden" name="userid" value="@userid" />
                                <input type="hidden" name="pageNumber" value="@ViewBag.pageNumber" />
                                <button type="submit" class="custom-button btn-gold btn-sm" title="Edit">
                                    <i class="bi bi-pencil-fill"></i>
                                </button>
                            </form>

                            <button type="button" class="custom-button btn-red btn-sm" onclick="confirmDelete(@row["ID"], '@tablename')" title="Delete">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        }
                        @if (readwriteaccess == "R")
                        {
                            <form method="get" asp-action="Edit" class="m-0 p-0">
                                <input type="hidden" name="id" value="@row["ID"]" />
                                <input type="hidden" name="PKID" value="@PKID" />
                                <input type="hidden" name="PKColumn" value="@PKColumn" />
                                <input type="hidden" name="tablename" value="@tablename" />
                                <input type="hidden" name="userid" value="@userid" />
                                <input type="hidden" name="pageNumber" value="@ViewBag.pageNumber" />
                                <button type="submit" class="custom-button btn-gold btn-sm" title="View">
                                    <i class="bi bi-eye-fill"></i>
                                </button>
                            </form>
                        }

                        <button type="button" class="custom-button btn-green btn-sm" onclick="showPopup(event, '@tablename', '@row["ID"]')" title="More">
                            <i class="bi bi-link-45deg"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
<div class="d-flex justify-content-center mt-3">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (ViewBag.pageNumber > 1)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TableY", new { PKID, PKColumn, userid, tablename, pageNumber = 1 })">First</a></li>
                <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TableY", new { PKID, PKColumn, userid, tablename, pageNumber = ViewBag.pageNumber - 1 })">&laquo; Prev</a></li>
            }
            @for (var i = Math.Max(1, ViewBag.pageNumber - 2); i <= Math.Min(ViewBag.totalPages, ViewBag.pageNumber + 2); i++)
            {
                <li class="page-item @(i == ViewBag.pageNumber ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", "TableY", new { PKID, PKColumn, userid, tablename, pageNumber = i })">@i</a>
                </li>
            }
            @if (ViewBag.pageNumber < ViewBag.totalPages)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TableY", new { PKID, PKColumn, userid, tablename, pageNumber = ViewBag.pageNumber + 1 })">Next &raquo;</a></li>
                <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TableY", new { PKID, PKColumn, userid, tablename, pageNumber = ViewBag.totalPages })">Last</a></li>
            }
        </ul>
    </nav>
</div>

<!-- Delete Modal -->
<div class="modal" tabindex="-1" id="deleteModal" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deactivation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">Are you sure you want to deactivate this record? This action cannot be undone.</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Confirm</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Popup -->
<div id="popup" class="popup" style="display:none;">
    <div id="popup-content" class="popup-content"></div>
</div>

@section Scripts {
    <script>
        // Sorting
        document.querySelectorAll("#dataTable th[data-column]").forEach(header => {
            header.style.cursor = "pointer";
            header.addEventListener("click", () => {
                const table = header.closest("table");
                const tbody = table.querySelector("tbody");
                const rows = Array.from(tbody.querySelectorAll("tr"));
                const columnIndex = Array.from(header.parentNode.children).indexOf(header);
                const sortAsc = !header.classList.contains("asc");

                rows.sort((a, b) => {
                    let cellA = a.children[columnIndex];
                    let cellB = b.children[columnIndex];
                    let valA = cellA.getAttribute("data-sort") || cellA.innerText.trim();
                    let valB = cellB.getAttribute("data-sort") || cellB.innerText.trim();
                    if (!isNaN(valA) && !isNaN(valB)) return sortAsc ? valA - valB : valB - valA;
                    return sortAsc ? valA.localeCompare(valB) : valB.localeCompare(valA);
                });

                rows.forEach(row => tbody.appendChild(row));
                table.querySelectorAll("th").forEach(th => th.classList.remove("asc", "desc"));
                header.classList.add(sortAsc ? "asc" : "desc");
            });
        });

        // Filter
        function filterTable() {
            const inputs = document.querySelectorAll('.column-search');
            const rows = document.querySelectorAll("#tableBody tr");
            rows.forEach(row => {
                let visible = true;
                inputs.forEach(input => {
                    const col = input.getAttribute("data-column");
                    const val = input.value.toLowerCase();
                    const cell = row.querySelector(`td[data-column="${col}"]`);
                    if (cell && val && !cell.innerText.toLowerCase().includes(val)) {
                        visible = false;
                    }
                });
                row.style.display = visible ? "" : "none";
            });
        }

        // Toggle search row
        function toggleSearch() {
            const row = document.getElementById("searchRow");
            const btn = document.getElementById("toggleSearchBtn");
            row.style.display = row.style.display === "none" ? "table-row" : "none";
            btn.innerText = row.style.display === "none" ? "+ Show Search" : "- Hide Search";
        }

        // Delete logic
        function confirmDelete(recordId, tableName) {
            $('#deleteModal').modal('show');
            $('#confirmDeleteBtn').off('click').on('click', function () {
                $('#deleteModal').modal('hide');
                $.ajax({
                    url: '@Url.Action("Delete", "TableY")',
                    method: 'POST',
                    data: { id: recordId, PKID: @PKID, PKColumn: '@PKColumn', tablename: tableName, userid: @userid },
                    success: function () { location.reload(); },
                    error: function () { alert('Error deleting record'); }
                });
            });
        }

        // Related table popup
        function showPopup(event, tablename, id) {
            let currentUrl = window.location.href;
            fetch(`/TableX/ForeignTables_Index?tablename=${tablename}&userid=${@userid}&isAjax=true`)
                .then(response => response.json())
                .then(data => {
                    let popup = document.getElementById('popup');
                    let content = `<table class="table"><thead><tr><th>Related Table</th><th></th></tr></thead><tbody>`;
                    data.forEach(record => {
                        const url = `/TableY/Index?userid=${@userid}&tablename=${record.ChildTable}&PKID=${id}&PKColumn=${record.PKColumn}&returnUrl=${encodeURIComponent(currentUrl)}`;
                        content += `<tr class="clickable-row" data-url="${url}" style="cursor:pointer;"><td>${record.ChildTableDescription}</td><td></td></tr>`;
                    });
                    content += `</tbody></table>`;
                    document.getElementById('popup-content').innerHTML = content;
                    popup.style.display = 'block';

                    const rect = event.target.getBoundingClientRect();
                    popup.style.left = rect.left + window.scrollX + 'px';
                    popup.style.top = rect.top + window.scrollY + 40 + 'px';

                    document.querySelectorAll(".clickable-row").forEach(row => {
                        row.addEventListener("click", function () {
                            window.location.href = this.getAttribute("data-url");
                        });
                    });
                });
        }

        // Close popup on outside click
        document.addEventListener('click', function (e) {
            const popup = document.getElementById('popup');
            if (popup.style.display === 'block' && !popup.contains(e.target) && !e.target.closest('.btn')) {
                popup.style.display = 'none';
            }
        });

        document.querySelectorAll('.column-search').forEach(input => {
            input.addEventListener("keyup", filterTable);
            input.addEventListener("change", filterTable);
        });

        // Enable Bootstrap tooltips globally
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

    </script>
}
