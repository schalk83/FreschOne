@model List<FreschOne.Models.PendingStepViewModel>

@{
    ViewData["Title"] = "Pending Items";
    int userId = ViewBag.UserID;
    var fullName = ViewBag.FullName;
}

<partial name="_Sidebar" />

<h2 class="mb-3">Pending Items for @fullName</h2>

<table id="pendingTable" class="table table-bordered table-hover align-middle">
    <thead class="table-light">
        <tr>
            <th data-column="ProcessInstanceID">Process Number</th>
            <th data-column="StepNo">Step No</th>
            <th data-column="StepDescription">Step Description</th>
            <th data-column="AssignedTo">Assigned To</th>
            <th data-column="DateAssigned">Date Assigned</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr class="@(item.IsReworkInstance ? "table-danger" : "")">
                <td>
                    @item.ProcessInstanceID
                    @if (item.IsReworkInstance)
                    {
                        <i class="bi bi-arrow-repeat text-danger ms-2"
                           data-bs-toggle="tooltip"
                           title="Reworked process instance"></i>
                    }
                </td>
                <td>@item.StepNo</td>
                <td>@item.StepDescription</td>
                <td>
                    @if (item.UserID.HasValue)
                    {
                        <span>@item.FullName</span>
                    }
                    else if (item.GroupID.HasValue)
                    {
                        <span>@item.GroupDescription</span>
                    }
                </td>
                <td data-sort="@item.DateAssigned.Ticks">@item.DateAssigned.ToString("yyyy-MM-dd HH:mm")</td>
                <td>
                    @if (item.UserID == null && item.GroupID != null)
                    {
                        <button class="btn custom-button btn-gold"
                                data-bs-toggle="modal"
                                data-bs-target="#confirmClaimModal_@item.EventID">
                            Claim @(item.StepType == "Approval" ? "Approval" : "Step")
                        </button>

                        <!-- Modal -->
                        <div class="modal fade" id="confirmClaimModal_@item.EventID" tabindex="-1" aria-labelledby="claimLabel_@item.EventID" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="claimLabel_@item.EventID">
                                            Confirm @(item.StepType == "Approval" ? "Approval Step" : "Step") Claim
                                        </h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to claim <strong>@item.StepDescription</strong>?
                                    </div>
                                    <div class="modal-footer">
                                        <form method="post"
                                              asp-action="ClaimStep"
                                              asp-controller="@(item.StepType == "Approval" ? "ApprovalEvents" : "ProcessEvents")"
                                              asp-route-userId="@userId"
                                              asp-route-EventID="@item.EventID"
                                              asp-route-stepId="@item.StepID"
                                              asp-route-processInstanceId="@item.ProcessInstanceID"
                                              asp-route-processId="@item.ProcessID">
                                            <button type="submit" class="btn btn-success">Yes, Claim</button>
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <a class="btn custom-button @(item.StepType == "Approval" ? "btn-green" : "btn-blue")"
                           asp-action="PendingStep"
                           asp-controller="@(item.StepType == "Approval" ? "ApprovalEvents" : "ProcessEvents")"
                           asp-route-userId="@userId"
                           asp-route-EventID="@item.EventID"
                           asp-route-stepId="@item.StepID"
                           asp-route-processInstanceId="@item.ProcessInstanceID"
                           asp-route-processId="@item.ProcessID">
                            Go to @(item.StepType == "Approval" ? "Approval" : "Step")
                        </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<script>
    document.querySelectorAll("#pendingTable th[data-column]").forEach(header => {
        header.style.cursor = "pointer";
        header.addEventListener("click", () => {
            const table = header.closest("table");
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const columnIndex = Array.from(header.parentNode.children).indexOf(header);
            const sortAsc = !header.classList.contains("asc");

            rows.sort((a, b) => {
                let cellA = a.children[columnIndex];
                let cellB = b.children[columnIndex];

                // If there's a data-sort attribute, use it
                let valueA = cellA.getAttribute("data-sort") || cellA.textContent.trim();
                let valueB = cellB.getAttribute("data-sort") || cellB.textContent.trim();

                // Numeric or text comparison
                if (!isNaN(valueA) && !isNaN(valueB)) {
                    return sortAsc ? valueA - valueB : valueB - valueA;
                }

                return sortAsc
                    ? valueA.localeCompare(valueB, undefined, { numeric: true })
                    : valueB.localeCompare(valueA, undefined, { numeric: true });
            });

            rows.forEach(row => tbody.appendChild(row)); // Reorder rows

            // Reset header classes
            table.querySelectorAll("th").forEach(th => th.classList.remove("asc", "desc"));
            header.classList.add(sortAsc ? "asc" : "desc");
        });
    });
</script>

<style>
    th.asc::after {
        content: " ▲";
        font-size: 0.8em;
    }

    th.desc::after {
        content: " ▼";
        font-size: 0.8em;
    }
</style>
