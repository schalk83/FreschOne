@model FreschOne.Models.foApprovalSteps
@{
    ViewData["Title"] = "Pending Approval Step";
    var userid = ViewBag.userid;
    var processInstanceId = ViewBag.processInstanceId;
    var stepId = ViewBag.stepId;
    var stepDescription = ViewBag.StepDescription;
    var stepNo = ViewBag.StepNo;
    var processid = ViewBag.processid;
    var EventID = ViewBag.EventID;
}

@if (TempData["RowErrors"] is List<string> errors && errors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<partial name="_Sidebar" />

<h2>Approval Step @stepNo - @stepDescription</h2>

<!-- ✅ Collapse Toggle Button -->
<button class="btn btn-outline-secondary mb-3"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#historySection"
        aria-expanded="false"
        aria-controls="historySection">
    📜 View Full History
</button>

<!-- ✅ Collapsible History Section -->
<div class="collapse" id="historySection">
    <div class="accordion" id="historyAccordion">
        @{
            var history = ViewBag.ProcessHistory as List<ProcessEventAuditViewModel> ?? new();
            var grouped = history.GroupBy(h => new
            {
                h.ProcessEventID,

                h.StepNo,
                StepDescription = h.Data.GetValueOrDefault("StepDescription")?.ToString(),
                StepType = h.Data.ContainsKey("StepType") && h.Data["StepType"]?.ToString() == "Approval" ? "Approval" : "Process",
            IsApproval = h.Data.TryGetValue("StepType", out var t) && t?.ToString() == "Approval"

            })
            .OrderBy(g => g.Min(x => x.CreatedDate));
            int i = 0;
        }

        @foreach (var stepGroup in grouped)
        {
            var headingId = $"historyHeading_{i}";
            var collapseId = $"historyCollapse_{i}";
            var icon = stepGroup.Key.IsApproval ? "🟡" : "🟢";
            var label = stepGroup.Key.IsApproval ? "Approval Step" : "Process Step";

            <div class="accordion-item">
                <h2 class="accordion-header" id="@headingId">
                    <button class="accordion-button collapsed d-flex justify-content-between align-items-center" type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#@collapseId"
                            aria-expanded="false"
                            aria-controls="@collapseId">
                        <div>
                            @icon Step @stepGroup.Key.StepNo – @stepGroup.Key.StepDescription
                        </div>
                    </button>
                </h2>
                <div id="@collapseId"
                     class="accordion-collapse collapse"
                     aria-labelledby="@headingId"
                     data-bs-parent="#historyAccordion">
                    <div class="accordion-bodbody">
                        @foreach (var eventGroup in stepGroup.GroupBy(e => new { e.ProcessEventID, e.CreatedDate, e.FullName }))
                        {
                            <div class="border rounded p-2 mb-3 @(stepGroup.Key.IsApproval ? "bg-warning-subtle border-warning" : "bg-info-subtle border-info")">
                                <strong>Captured:</strong> @eventGroup.Key.CreatedDate.ToString("yyyy-MM-dd HH:mm") by @eventGroup.Key.FullName

                                @foreach (var entry in eventGroup)
                                {
                                    <div class="mt-3">
                                        <strong>Table:</strong> @entry.TableName<br />

                                        <ul class="mt-1">
                                            @foreach (var field in entry.Data
                                           .Where(kvp => kvp.Key != "StepDescription" &&
                                           kvp.Key != "TableDescription" &&
                                           kvp.Key != "interactionType" &&
                                           kvp.Key != "CreatedUserID" &&
                                           kvp.Key != "CreatedDate" &&
                                           kvp.Key != "StepType"))
                                            {
                                                var key = field.Key;
                                                var value = field.Value?.ToString();

                                                string prettyLabel = key;
                                                if (prettyLabel.StartsWith("attachment_"))
                                                    prettyLabel = prettyLabel.Replace("attachment_", "").Replace("_", " ");
                                                else if (prettyLabel.EndsWith("ID"))
                                                    prettyLabel = prettyLabel.Substring(0, prettyLabel.Length - 2);

                                                prettyLabel = System.Text.RegularExpressions.Regex.Replace(prettyLabel.Replace("_", " "), "(?<=.)([A-Z])", " $1");

                                                <li><strong>@prettyLabel:</strong> @Html.Raw(value)</li>
                                            }
                                        </ul>
                                        @entry.DetailID
                                                                            </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            i++;
        }
    </div>
</div>


<form asp-action="SaveApproval" method="post" enctype="multipart/form-data">
    <input type="hidden" name="userId" value="@userid" />
    <input type="hidden" name="stepId" value="@stepId" />
    <input type="hidden" name="EventID" value="@EventID" />

    <input type="hidden" name="stepDescription" value="@stepDescription" />
    <input type="hidden" name="processInstanceId" value="@processInstanceId" />

    <input type="hidden" name="processid" value="@processid" />


    <div class="mb-3">
        <label class="fw-bold" for="decision" class="form-label">Decision</label>
        <select id="decision" name="decision" class="form-select" required>
            <option value="">-- Select Decision --</option>
            <option value="Approve">Approve</option>
            <option value="Rework">Rework</option>
            <option value="Decline">Decline</option>
        </select>
    </div>

    <div class="mb-3">
        <label class="fw-bold" for="comment" class="form-label">Comment</label>
        <textarea id="comment" name="comment" class="form-control" rows="3"></textarea>
    </div>

    <div class="mb-3">
        <label class="fw-bold" class="form-label">Attachments</label>
        <div id="attachment-wrapper">
            <div class="input-group mb-2 align-items-center">
                <input type="text" name="desc_attachments[0]" class="form-control" placeholder="Description" />
                <input type="file" name="attachments[0]" class="form-control" />
                <button type="button" class="btn btn-link text-danger remove-attachment-btn" title="Remove Attachment">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>

        </div>
        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addAttachmentField()">Add Attachment</button>
    </div>

    <button type="submit" class="btn btn-primary">Submit Decision</button>
</form>

@section Scripts {
    <script>
        let attachmentIndex = 1;

               function addAttachmentField() {
            const wrapper = document.getElementById("attachment-wrapper");
            const inputGroup = document.createElement("div");
            inputGroup.classList.add("input-group", "mb-2", "align-items-center");
            inputGroup.innerHTML = `
                <input type="text" name="desc_attachments[${attachmentIndex}]" class="form-control" placeholder="Description" />
                <input type="file" name="attachments[${attachmentIndex}]" class="form-control" />
                <button type="button" class="btn btn-link text-danger remove-attachment-btn" title="Remove Attachment">
                    <i class="fas fa-trash-alt"></i>
                </button>
            `;
            wrapper.appendChild(inputGroup);
            attachmentIndex++;
        }


        document.getElementById("decision").addEventListener("change", function () {
            var commentField = document.getElementById("comment");
            commentField.required = (this.value === "Rework" || this.value === "Decline");
        });

                document.addEventListener("click", function (e) {
            if (e.target.closest(".remove-attachment-btn")) {
                const inputGroup = e.target.closest(".input-group");
                if (inputGroup) inputGroup.remove();
            }
        });


    </script>
}
